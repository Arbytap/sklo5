import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from models import (
    create_timeoff_request, get_pending_timeoff_requests,
    update_timeoff_request, get_timeoff_requests_for_user,
    get_user_name_by_id
)
from user_management import get_formatted_user_info
from config import ADMIN_ID

logger = logging.getLogger(__name__)

# States for conversation handler
TYPING_REASON = 1

def start_timeoff_request(update: Update, context: CallbackContext):
    """Start the time off request conversation"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ context –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_data –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if context is None:
        logger.error("CallbackContext is None –≤ start_timeoff_request")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
        )
        return ConversationHandler.END
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if not hasattr(context, 'user_data'):
        context.user_data = {}
    
    context.user_data['timeoff_request'] = {}  # Initialize an empty request
    
    update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:"
    )
    
    return TYPING_REASON

def process_timeoff_reason(update: Update, context: CallbackContext):
    """Process the reason for time off and submit the request"""
    reason = update.message.text
    user = update.effective_user
    username = user.username or str(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ context –∏ –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    if context is None:
        logger.error("CallbackContext is None –≤ process_timeoff_reason")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
        )
        return ConversationHandler.END
    
    try:
        # Create the request in the database
        request_id = create_timeoff_request(user.id, username, reason)
        
        # Notify the user
        update.message.reply_text(
            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
        # Notify the admin
        user_name = get_user_name_by_id(user.id) or username
        
        # Create inline keyboard for admin to approve/reject
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data=f"approve_timeoff_{request_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_timeoff_{request_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        admin_message = (
            f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç {user_name}:\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if not hasattr(context, 'bot') or context.bot is None:
            logger.error("–û–±—ä–µ–∫—Ç bot –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ context")
            update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, "
                "–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
            )
            return ConversationHandler.END
        
        context.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_message,
            reply_markup=reply_markup
        )
        
        return ConversationHandler.END
    
    except Exception as e:
        logger.error(f"Error processing time off reason: {e}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END

def cancel_timeoff_request(update: Update, context: CallbackContext):
    """Cancel the time off request conversation"""
    update.message.reply_text("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

def handle_timeoff_response(update: Update, context: CallbackContext):
    """Handle admin response to a time off request"""
    if not update.callback_query:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ callback –≤ handle_timeoff_response")
        return
        
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—è from_user –≤ callback_query
    if not hasattr(query, 'from_user') or query.from_user is None:
        logger.error("–û–±—ä–µ–∫—Ç from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ callback_query –≤ handle_timeoff_response")
        return
    
    admin_id = query.from_user.id
    
    # Check if the user is admin
    if admin_id != ADMIN_ID:
        query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
        )
        return
    
    # Parse callback data
    if not query.data:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç query.data –≤ callback")
        query.edit_message_text("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return
        
    try:
        data = query.data.split('_')
        if len(data) < 3:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback: {query.data}")
            query.edit_message_text("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞.")
            return
            
        action = data[0]  # "approve" or "reject"
        request_id = int(data[2])  # request_id
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö callback: {e}, –¥–∞–Ω–Ω—ã–µ: {query.data}")
        query.edit_message_text("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    # Update the request in the database
    status = "approved" if action == "approve" else "rejected"
    user_id, username = update_timeoff_request(request_id, status, admin_id)
    
    if user_id is None:
        query.edit_message_text(
            "–û—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."
        )
        return
    
    # Get user's full name
    user_name = get_user_name_by_id(user_id) or username
    
    # Update the admin message
    query.edit_message_text(
        f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç {user_name} –±—ã–ª–∞ {'—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞' if status == 'approved' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}."
    )
    
    # Notify the user
    status_text = "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞" if status == "approved" else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    user_message = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±—ã–ª–∞ {status_text} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if context is None or not hasattr(context, 'bot') or context.bot is None:
        logger.error(f"–û–±—ä–µ–∫—Ç bot –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ context –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    try:
        context.bot.send_message(
            chat_id=user_id,
            text=user_message
        )
    except Exception as e:
        logger.error(f"Error sending notification to user {user_id}: {e}")

def show_my_timeoff_requests(update: Update, context: CallbackContext):
    """Show all time off requests for the current user"""
    user = update.effective_user
    
    requests = get_timeoff_requests_for_user(user.id)
    
    if not requests:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ.")
        return
    
    message = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ:\n\n"
    
    for req_id, reason, request_time, status, response_time in requests:
        # Convert status to Russian
        status_ru = {
            "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
            "approved": "‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ",
            "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        }.get(status, status)
        
        # Format the message
        message += f"–ó–∞—è–≤–∫–∞ #{req_id}:\n"
        message += f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        message += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_ru}\n"
        message += f"‚Ä¢ –î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {datetime.fromisoformat(request_time).strftime('%Y-%m-%d %H:%M')}\n"
        
        if response_time and response_time != "None":
            message += f"‚Ä¢ –î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {datetime.fromisoformat(response_time).strftime('%Y-%m-%d %H:%M')}\n"
        
        message += "\n"
    
    update.message.reply_text(message)

def show_pending_timeoff_requests(update: Update, context: CallbackContext):
    """Show all pending time off requests for admin"""
    user = update.effective_user
    
    # Check if the user is admin
    if user.id != ADMIN_ID:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    requests = get_pending_timeoff_requests()
    
    if not requests:
        update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
        return
    
    for req_id, user_id, username, reason, request_time in requests:
        # Get user's full name
        user_name = get_user_name_by_id(user_id) or username
        
        # Create inline keyboard for admin to approve/reject
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data=f"approve_timeoff_{req_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_timeoff_{req_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            f"üìã –ó–∞—è–≤–∫–∞ #{req_id} –æ—Ç {user_name}:\n\n"
            f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"‚Ä¢ –î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {datetime.fromisoformat(request_time).strftime('%Y-%m-%d %H:%M')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        update.message.reply_text(
            text=message,
            reply_markup=reply_markup
        )

def register_timeoff_handlers(dispatcher):
    """Register all timeoff request related handlers"""
    from telegram.ext import CommandHandler, MessageHandler, Filters, CallbackQueryHandler
    
    # Create conversation handler for timeoff requests
    # Note: We don't register the handler for message "üìù –û—Ç–ø—Ä–æ—Å–∏—Ç—å—Å—è" here because
    # that's handled in the main handle_status_message function which calls start_timeoff_request
    # We need to explicitly register a command handler for '/request'
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('request', start_timeoff_request)],
        states={
            TYPING_REASON: [MessageHandler(Filters.text & ~Filters.command, process_timeoff_reason)],
        },
        fallbacks=[CommandHandler('cancel', cancel_timeoff_request)]
    )
    
    # Register separate conversation handler for messages
    # This specifically handles the "üìù –û—Ç–ø—Ä–æ—Å–∏—Ç—å—Å—è" button
    timeoff_msg_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^üìù –û—Ç–ø—Ä–æ—Å–∏—Ç—å—Å—è$'), start_timeoff_request)],
        states={
            TYPING_REASON: [MessageHandler(Filters.text & ~Filters.command, process_timeoff_reason)],
        },
        fallbacks=[CommandHandler('cancel', cancel_timeoff_request)]
    )
    
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(timeoff_msg_handler)  # Add the new handler
    dispatcher.add_handler(CommandHandler('myrequests', show_my_timeoff_requests))
    dispatcher.add_handler(CommandHandler('requests', show_pending_timeoff_requests))
    dispatcher.add_handler(CallbackQueryHandler(handle_timeoff_response, pattern='^(approve|reject)_timeoff_'))
