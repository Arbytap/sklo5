import logging
import os
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackContext, ConversationHandler
from models import (
    add_or_update_user_mapping, get_user_name_by_id, get_user_id_by_name, 
    get_all_users, delete_user, set_user_admin_status
)
from database import get_user_locations, DATABASE_FILE
from config import ADMIN_ID, ADMIN_IDS, MOSCOW_TZ

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ADD_USER_ID, ADD_USER_NAME, ADD_USER_ADMIN_STATUS = range(3)

logger = logging.getLogger(__name__)

def is_admin(user_id):
    """Check if a user is an admin"""
    return user_id == ADMIN_ID

def load_user_mappings_from_file(filename=None, update_db=False):
    """Load user ID to name mappings from the database
    
    Args:
        filename: Ignored parameter for backward compatibility
        update_db: Ignored parameter for backward compatibility
    """
    mappings = {}
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        users = get_all_users()
        for user in users:
            user_id, full_name = user[0], user[1]
            mappings[user_id] = full_name
        
        logger.info(f"Loaded {len(mappings)} user mappings from database")
        return mappings
    except Exception as e:
        logger.error(f"Error loading user mappings from database: {e}")
        return {}

def get_admin_user_selector(callback_prefix="locate_user"):
    """Create an inline keyboard with all users for admin selection"""
    users = get_all_users()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '{callback_prefix}'")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # Create a list of buttons, each row contains 1 user
    keyboard = []
    for user in users:
        if len(user) >= 2:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã user_id –∏ full_name
            user_id, full_name = user[0], user[1]
            callback = f"{callback_prefix}_{user_id}"
            logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É: '{full_name}' -> '{callback}'")
            keyboard.append([InlineKeyboardButton(
                full_name, callback_data=callback
            )])
    
    return InlineKeyboardMarkup(keyboard)

def get_formatted_user_info(user_id):
    """Get formatted user information including name"""
    user_name = get_user_name_by_id(user_id)
    if user_name:
        return f"{user_name} (ID: {user_id})"
    else:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}"

def find_user_location(user_id, context: CallbackContext):
    """Find the most recent location of a user and format it for display"""
    locations = get_user_locations(user_id, hours_limit=24)
    
    if not locations:
        return "–î–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    # Get the most recent location
    most_recent = locations[-1]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ get_user_locations
    if len(most_recent) >= 5:  # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å 5 –ø–æ–ª—è–º–∏ (id, lat, lon, timestamp, loc_type)
        location_id, lat, lon, timestamp, loc_type = most_recent
    elif len(most_recent) >= 4:  # –§–æ—Ä–º–∞—Ç —Å 4 –ø–æ–ª—è–º–∏
        location_id, lat, lon, timestamp = most_recent
        loc_type = '–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è'
    elif len(most_recent) >= 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        lat, lon, timestamp = most_recent[:3]
        loc_type = '–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è'
    else:
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏."
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if isinstance(lat, str):
        lat = float(lat)
    if isinstance(lon, str):
        lon = float(lon)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º timestamp, –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–æ–∫–∞
    if isinstance(timestamp, str):
        try:
            timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            try:
                timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S.%f')
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}"
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –Ω–µ –æ–Ω–æ
    if hasattr(timestamp, 'astimezone'):
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            timestamp = timestamp.astimezone(MOSCOW_TZ)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {e}")
    
    user_name = get_user_name_by_id(user_id) or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é get_user_latest_status
    from database import get_user_latest_status
    status_data = get_user_latest_status(user_id)
    current_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    if status_data:
        current_status = status_data[0]  # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ (status, timestamp)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ
        if current_status == "home":
            current_status = "–î–æ–º–æ–π"
        elif current_status == "office":
            current_status = "–í –æ—Ñ–∏—Å–µ"
        elif current_status == "sick":
            current_status = "–ë–æ–ª–µ—é"
        elif current_status == "vacation":
            current_status = "–í –æ—Ç–ø—É—Å–∫–µ"
        elif current_status == "night_shift":
            current_status = "–í –Ω–æ—á—å"
        elif current_status == "after_night":
            current_status = "–° –Ω–æ—á–∏"
        elif current_status.lower() == "stationary":
            current_status = "–ù–∞ –º–µ—Å—Ç–µ"
        elif current_status.lower() == "moving":
            current_status = "–í –¥–≤–∏–∂–µ–Ω–∏–∏"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    status_icon = "üîµ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if current_status == "–í –æ—Ñ–∏—Å–µ":
        status_icon = "üè¢"
    elif current_status == "–î–æ–º–æ–π":
        status_icon = "üè†"
    elif current_status == "–ë–æ–ª–µ—é":
        status_icon = "ü§í"
    elif current_status == "–í –æ—Ç–ø—É—Å–∫–µ":
        status_icon = "üèñÔ∏è"
    elif current_status == "–í –Ω–æ—á—å":
        status_icon = "üåô"
    elif current_status == "–° –Ω–æ—á–∏":
        status_icon = "üåÖ"
    
    # Format the message
    message = f"üìç –ü–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {user_name}:\n"
    message += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_icon} {current_status}\n"
    message += f"‚Ä¢ –®–∏—Ä–æ—Ç–∞: {lat:.6f}\n"
    message += f"‚Ä¢ –î–æ–ª–≥–æ—Ç–∞: {lon:.6f}\n"
    message += f"‚Ä¢ –í—Ä–µ–º—è: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}\n"
    message += f"‚Ä¢ –¢–∏–ø: {loc_type}\n"
    message += f"\n<a href='https://maps.google.com/maps?q={lat},{lon}'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Google Maps</a>"
    
    return message

def handle_admin_command(update: Update, context: CallbackContext):
    """Handle admin commands"""
    user = update.effective_user
    
    # Check if user is admin
    if user.id != ADMIN_ID:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    from utils import get_admin_keyboard
    
    # Send admin panel
    update.message.reply_text(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

def handle_locate_command(update: Update, context: CallbackContext):
    """Handle locate command to find users"""
    user = update.effective_user
    
    # Check if user is admin
    if user.id != ADMIN_ID:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    # Send user selector
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
        reply_markup=get_admin_user_selector("locate_user")
    )

def handle_locate_callback(update: Update, context: CallbackContext):
    """Handle callback when admin selects a user to locate"""
    query = update.callback_query
    query.answer()
    
    # Extract user ID from callback data
    user_id = int(query.data.split('_')[2])
    
    # Get location information
    location_message = find_user_location(user_id, context)
    
    # Send message with location info
    query.edit_message_text(
        text=location_message,
        parse_mode='HTML'
    )

def start_add_user_flow(update: Update, context: CallbackContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query.edit_message_text(
        "üë§ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (—á–∏—Å–ª–æ–≤–æ–π):",
        parse_mode="Markdown"
    )
    
    return ADD_USER_ID

def handle_user_id_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    if not update.message:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_user_id_input")
        return ConversationHandler.END
    
    user_id_text = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id_text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥—ë–Ω —á–∏—Å–ª–æ–≤–æ–π ID
    try:
        user_id = int(user_id_text)
        context.user_data['new_user_id'] = user_id
        logger.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —á–∏—Å–ª–æ: {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
        existing_name = get_user_name_by_id(user_id)
        if existing_name:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_name}")
            update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                f"–ò–º—è: {existing_name}\n\n"
                "–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è "
                "–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
        else:
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id}, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è")
            update.message.reply_text(
                f"ID {user_id} –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–§–ò–û):"
            )
        
        return ADD_USER_NAME
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return ADD_USER_ID

def handle_user_name_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    if not update.message:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_user_name_input")
        return ConversationHandler.END
    
    full_name = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {full_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if not full_name or full_name.startswith('/'):
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è: {full_name}")
        update.message.reply_text(
            "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π.\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return ADD_USER_NAME
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['new_user_name'] = full_name
    logger.info(f"–ò–º—è {full_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø—Ä–∞–≤–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = ReplyKeyboardMarkup(
        [["–î–∞", "–ù–µ—Ç"]], 
        resize_keyboard=True, 
        one_time_keyboard=True
    )
    
    update.message.reply_text(
        f"–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ: {full_name}\n\n"
        "–°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º?",
        reply_markup=keyboard
    )
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    return ADD_USER_ADMIN_STATUS

def handle_admin_status_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    if not update.message:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_admin_status_input")
        return ConversationHandler.END
    
    admin_choice = update.message.text.strip().lower()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_choice}")
    
    user_id = context.user_data.get('new_user_id')
    full_name = context.user_data.get('new_user_name')
    
    logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: user_id={user_id}, full_name={full_name}")
    
    if not user_id or not full_name:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin_status = True if admin_choice == "–¥–∞" else False
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {is_admin_status}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = add_or_update_user_mapping(user_id, full_name, is_admin=is_admin_status)
        
        if success:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")
            admin_text = "—Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if is_admin_status else "–±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"ID: {user_id}\n"
                f"–ò–º—è: {full_name}\n"
                f"–°—Ç–∞—Ç—É—Å: {admin_text}",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {full_name} (ID: {user_id}) –≤ –ë–î")
            update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    return ConversationHandler.END

def cancel_add_user(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    if not update.message:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ cancel_add_user")
        return ConversationHandler.END
    
    update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    cleaned_keys = []
    if 'new_user_id' in context.user_data:
        del context.user_data['new_user_id']
        cleaned_keys.append('new_user_id')
    if 'new_user_name' in context.user_data:
        del context.user_data['new_user_name']
        cleaned_keys.append('new_user_name')
    
    logger.info(f"–û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {', '.join(cleaned_keys)}")
    
    return ConversationHandler.END

def get_users_management_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user")],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞", callback_data="admin_change_rights")],
        [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_view_users")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    return InlineKeyboardMarkup(keyboard)

def handle_users_management(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    query.edit_message_text(
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_users_management_keyboard()
    )

def handle_view_users(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    
    if not users:
        query.edit_message_text(
            "üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            parse_mode="Markdown",
            reply_markup=get_users_management_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    message = "üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
    
    for i, user in enumerate(users, 1):
        if len(user) >= 3:  # ID, –∏–º—è, —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
            user_id, full_name, is_admin_status = user[0], user[1], user[2]
            admin_text = "‚úì" if is_admin_status else "‚úó"
            message += f"{i}. {full_name} (ID: {user_id}) - –ê–¥–º–∏–Ω: {admin_text}\n"
        elif len(user) >= 2:  # ID, –∏–º—è
            user_id, full_name = user[0], user[1]
            message += f"{i}. {full_name} (ID: {user_id})\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]]
    
    query.edit_message_text(
        message,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def handle_delete_user_selection(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    query.edit_message_text(
        "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=get_admin_user_selector("delete_user")
    )

def handle_delete_user_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    callback_data = query.data
    user_id = int(callback_data.split('_')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = get_user_name_by_id(user_id)
    
    if not user_name:
        query.edit_message_text(
            "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
            ]])
        )
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{user_id}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="admin_users")
        ]
    ]
    
    query.edit_message_text(
        f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"*{user_name}* (ID: {user_id})?\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def handle_confirm_delete_user(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    callback_data = query.data
    user_id = int(callback_data.split('_')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    user_name = get_user_name_by_id(user_id)
    
    if not user_name:
        query.edit_message_text(
            "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
            ]])
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        success = delete_user(user_id)
        
        if success:
            query.edit_message_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{user_name}* (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
                ]])
            )
            logger.info(f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})")
        else:
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
                ]])
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
    except Exception as e:
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
            ]])
        )
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}: {e}")

def handle_change_rights_selection(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    query.edit_message_text(
        "üîÑ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤:",
        parse_mode="Markdown",
        reply_markup=get_admin_user_selector("change_rights")
    )

def handle_change_rights_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    callback_data = query.data
    user_id = int(callback_data.split('_')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        cursor.execute('SELECT full_name, is_admin FROM user_mapping WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if not result:
            query.edit_message_text(
                "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
                ]])
            )
            return
        
        full_name, is_admin_status = result
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if is_admin_status:
            action_text = "–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            action_callback = f"revoke_admin_{user_id}"
            current_status = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚úì"
        else:
            action_text = "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            action_callback = f"grant_admin_{user_id}"
            current_status = "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚úó"
        
        keyboard = [
            [InlineKeyboardButton(action_text, callback_data=action_callback)],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ]
        
        query.edit_message_text(
            f"üîÑ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *{full_name}* (ID: {user_id})\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
            ]])
        )
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}: {e}")

def handle_admin_rights_change(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    callback_data = query.data
    action_type, user_id = callback_data.split('_')[0], int(callback_data.split('_')[-1])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    is_admin_status = True if action_type == "grant" else False
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = get_user_name_by_id(user_id)
    
    if not user_name:
        query.edit_message_text(
            "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
            ]])
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        success = set_user_admin_status(user_id, is_admin_status)
        
        if success:
            status_text = "–Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" if is_admin_status else "–ª–∏—à–µ–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            query.edit_message_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{user_name}* (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ {status_text}.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
                ]])
            )
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω—ã –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id}): –∞–¥–º–∏–Ω={is_admin_status}")
        else:
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
                ]])
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
    except Exception as e:
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
            ]])
        )
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}: {e}")

def register_admin_handlers(dispatcher):
    """Register all admin command handlers"""
    from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, Filters
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("admin", handle_admin_command))
    dispatcher.add_handler(CommandHandler("locate", handle_locate_command))
    dispatcher.add_handler(CallbackQueryHandler(handle_locate_callback, pattern="^locate_user_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    dispatcher.add_handler(CallbackQueryHandler(handle_users_management, pattern="^admin_users$"))
    dispatcher.add_handler(CallbackQueryHandler(handle_view_users, pattern="^admin_view_users$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    dispatcher.add_handler(CallbackQueryHandler(handle_delete_user_selection, pattern="^admin_delete_user$"))
    dispatcher.add_handler(CallbackQueryHandler(handle_delete_user_callback, pattern="^delete_user_"))
    dispatcher.add_handler(CallbackQueryHandler(handle_confirm_delete_user, pattern="^confirm_delete_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    dispatcher.add_handler(CallbackQueryHandler(handle_change_rights_selection, pattern="^admin_change_rights$"))
    dispatcher.add_handler(CallbackQueryHandler(handle_change_rights_callback, pattern="^change_rights_"))
    dispatcher.add_handler(CallbackQueryHandler(handle_admin_rights_change, pattern="^grant_admin_"))
    dispatcher.add_handler(CallbackQueryHandler(handle_admin_rights_change, pattern="^revoke_admin_"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    add_user_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_add_user_flow, pattern="^admin_add_user$")],
        states={
            ADD_USER_ID: [MessageHandler(Filters.text & ~Filters.command, handle_user_id_input)],
            ADD_USER_NAME: [MessageHandler(Filters.text & ~Filters.command, handle_user_name_input)],
            ADD_USER_ADMIN_STATUS: [MessageHandler(Filters.text & ~Filters.command, handle_admin_status_input)]
        },
        fallbacks=[CommandHandler("cancel", cancel_add_user)],
        # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º per_message=True, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å MessageHandler
        allow_reentry=True  # –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ –¥–∏–∞–ª–æ–≥
    )
    
    # –í–∞–∂–Ω–æ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω—å—à–µ, —á–µ–º –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(add_user_conv_handler)
