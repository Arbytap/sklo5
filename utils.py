import logging
import pandas as pd
import folium
import io
from datetime import datetime, time as dt_time
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from config import MOSCOW_TZ, STATUS_OPTIONS

logger = logging.getLogger(__name__)

def log_update(update):
    """Log information about the incoming update."""
    if update.message:
        logger.info(f"Received message from {update.message.from_user.username or update.message.from_user.id}: "
                   f"{update.message.text}")
    elif update.callback_query:
        logger.info(f"Received callback query from {update.callback_query.from_user.username or update.callback_query.from_user.id}: "
                   f"{update.callback_query.data}")

def extract_user_data(user):
    """Extract user data from a Telegram User object."""
    return {
        'user_id': user.id,
        'is_bot': user.is_bot,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'username': user.username,
        'language_code': user.language_code
    }

def format_bot_help():
    """Format the help message for the bot."""
    help_text = (
        "ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞* ü§ñ\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/status - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "/request - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–≥—É–ª/–æ—Ç–ø—É—Å–∫\n"
        "/myrequests - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏\n"
        "/timeoff_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–≥—É–ª–∞–º\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "üî∏ *–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤* üî∏\n"
        "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "/locate - –ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
        "/requests - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫\n"
        "/report - –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç\n"
        "/generate_reports - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤\n"
    )
    return help_text

def is_workday():
    """Check if today is a workday (Monday-Friday)"""
    now = datetime.now(MOSCOW_TZ)
    # 0 = Monday, 6 = Sunday
    return now.weekday() < 5

def is_admin(user_id):
    """Check if a user is an admin"""
    from config import ADMIN_ID, ADMIN_IDS
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_ID:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if ADMIN_IDS:
        try:
            admin_list = [int(id.strip()) for id in ADMIN_IDS.split(",")]
            return user_id in admin_list
        except (ValueError, AttributeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    
    return False

def create_map_for_user(user_id, locations, user_name=None, date=None):
    """Create a map with user's locations
    
    Args:
        user_id: ID of the user
        locations: List of (lat, lon, timestamp, loc_type) tuples
        user_name: Optional name of the user
        date: Date string in format 'YYYY-MM-DD' for the map filename
    
    Returns:
        Path to the generated HTML map file
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –Ω–∞—à—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ direct_map_fix
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        from fixed_map_generator import create_direct_map
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
        if not date:
            date = datetime.now().strftime('%Y-%m-%d')
            
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        logger.info(f"–í—ã–∑–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ create_direct_map –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ {date}")
        map_filename = create_direct_map(user_id, date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if map_filename and os.path.exists(map_filename):
            logger.info(f"–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ create_direct_map: {map_filename}")
            return map_filename
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ create_direct_map –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ create_direct_map: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    if not locations:
        logger.warning(f"No locations provided")
        return None
    
    if not user_name:
        from models import get_user_name_by_id
        user_name = get_user_name_by_id(user_id) or f"User {user_id}"
    
    # Filter out invalid coordinates
    valid_locations = []
    for loc in locations:
        # Check location format
        if len(loc) < 3:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {loc}")
            continue
        
        # Extract lat and lon
        if len(loc) >= 4:
            lat, lon = loc[0], loc[1]
        else:
            lat, lon = loc[0], loc[1]
        
        # Validate coordinates
        try:
            if isinstance(lat, str):
                lat = float(lat)
            if isinstance(lon, str):
                lon = float(lon)
                
            # Skip invalid coordinates
            if not (-90 <= lat <= 90 and -180 <= lon <= 180):
                logger.warning(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {lat}, {lon}")
                continue
                
            valid_locations.append(loc)
        except (ValueError, TypeError) as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {lat}, {lon}: {e}")
            continue
    
    if not valid_locations:
        logger.warning(f"–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
        return None
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã —Ç–æ—á–∫–∏ –±—ã–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ timestamp –∫ datetime
    processed_locations = []
    for loc in valid_locations:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime, –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–æ–∫–∞
            if len(loc) >= 3:
                timestamp = loc[2]
                if isinstance(timestamp, str):
                    try:
                        timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                    except ValueError:
                        try:
                            timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S.%f')
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å timestamp: {e}")
                            timestamp = datetime.now(MOSCOW_TZ)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ—Ä—Ç–µ–∂ —Å datetime –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
                new_loc = list(loc)
                new_loc[2] = timestamp
                processed_locations.append(tuple(new_loc))
            else:
                processed_locations.append(loc)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –ª–æ–∫–∞—Ü–∏–∏: {e}")
            processed_locations.append(loc)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    processed_locations.sort(key=lambda x: x[2] if len(x) >= 3 else datetime.now(MOSCOW_TZ))
    
    # Calculate map center
    lats = [float(loc[0]) if isinstance(loc[0], str) else loc[0] for loc in processed_locations]
    lons = [float(loc[1]) if isinstance(loc[1], str) else loc[1] for loc in processed_locations]
    
    avg_lat = sum(lats) / len(lats)
    avg_lon = sum(lons) / len(lons)
    
    # Create the map with OpenStreetMap tiles
    m = folium.Map(
        location=[avg_lat, avg_lon], 
        zoom_start=15, 
        tiles='OpenStreetMap',
        control_scale=True
    )
    
    # Add markers and path
    path_coords = []
    path_times = []
    path_speeds = []
    movement_types = []
    
    # Define custom icons for different point types
    start_icon = folium.Icon(color='green', icon='play')
    end_icon = folium.Icon(color='red', icon='stop')
    stationary_icon = folium.Icon(color='orange', icon='pause')
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    total_distance = 0  # –æ–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
    total_time = 0      # –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    last_lat, last_lon, last_time = None, None, None
    
    # –ü—Ä–æ—Ü–µ—Å—Å–∏–º —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    for i, loc_item in enumerate(processed_locations):
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            if len(loc_item) >= 5:  # –§–æ—Ä–º–∞—Ç —Å –ø–æ–ª—è–º–∏ lat, lon, timestamp, session_id, loc_type
                lat, lon, timestamp, _, loc_type = loc_item[:5]
            elif len(loc_item) >= 4:  # –§–æ—Ä–º–∞—Ç –ª–æ–∫–∞—Ü–∏–∏ —Å —á–µ—Ç—ã—Ä—å–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                lat, lon, timestamp, loc_type = loc_item[:4]
                # –ï—Å–ª–∏ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —Å—Ç—Ä–æ–∫–∞, —Ç–æ —ç—Ç–æ –Ω–µ —Ç–∏–ø, –∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
                if not isinstance(loc_type, str):
                    loc_type = 'intermediate'
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫–∏
                    if i == 0:
                        loc_type = 'start'
                    elif i == len(processed_locations) - 1:
                        loc_type = 'end'
            elif len(loc_item) >= 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                lat, lon, timestamp = loc_item[:3]
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫–∏
                if i == 0:
                    loc_type = 'start'
                elif i == len(processed_locations) - 1:
                    loc_type = 'end'
                else:
                    loc_type = 'intermediate'
            else:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø–∏—Å–∏: {loc_item}")
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            if not (isinstance(lat, (int, float)) or (isinstance(lat, str) and lat.replace('.', '', 1).isdigit())):
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —à–∏—Ä–æ—Ç—ã: {lat}, —Ç–∏–ø: {type(lat)}")
                continue
                
            if not (isinstance(lon, (int, float)) or (isinstance(lon, str) and lon.replace('.', '', 1).isdigit())):
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–≥–æ—Ç—ã: {lon}, —Ç–∏–ø: {type(lon)}")
                continue
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
            if isinstance(lat, str):
                lat = float(lat)
            if isinstance(lon, str):
                lon = float(lon)
            
            # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏
            distance = 0
            speed = 0
            time_diff = 0
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
            if last_lat is not None and last_time is not None:
                from math import sin, cos, sqrt, atan2, radians
                
                R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
                
                lat1 = radians(float(last_lat))
                lon1 = radians(float(last_lon))
                lat2 = radians(float(lat))
                lon2 = radians(float(lon))
                
                dlon = lon2 - lon1
                dlat = lat2 - lat1
                
                a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
                c = 2 * atan2(sqrt(a), sqrt(1 - a))
                
                distance = R * c  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
                total_distance += distance
                
                # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ timestamp –∏ last_time - –æ–±—ä–µ–∫—Ç—ã datetime
                    if isinstance(timestamp, datetime) and isinstance(last_time, datetime):
                        time_diff = (timestamp - last_time).total_seconds()
                        total_time += time_diff
                        
                        if time_diff > 0:
                            speed = (distance / time_diff) * 3.6  # –∫–º/—á
                        else:
                            speed = 0
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ datetime –æ–±—ä–µ–∫—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        logger.warning(f"–û–¥–∏–Ω –∏–∑ timestamp –Ω–µ —è–≤–ª—è–µ—Ç—Å—è datetime –æ–±—ä–µ–∫—Ç–æ–º: {timestamp}, {last_time}")
                        time_diff = 0
                        speed = 0
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                    time_diff = 0
                    speed = 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            last_lat, last_lon, last_time = lat, lon, timestamp
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–µ–Ω–∏—è –∏ —Ü–≤–µ—Ç —Ç–æ—á–∫–∏
            point_color = 'blue'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
            movement_status = 'unknown'
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º loc_type –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if loc_type == 'start':
                point_color = 'green'
                movement_status = 'start'
            elif loc_type == 'end':
                point_color = 'red'
                movement_status = 'end'
            elif loc_type == 'stationary':
                point_color = 'orange'
                movement_status = 'stationary'
            elif loc_type == 'moving':
                point_color = 'purple'
                movement_status = 'moving'
                if speed > 50:
                    movement_status = 'fast_moving'
                    point_color = 'darkpurple'
            
            movement_types.append(movement_status)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º timestamp –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
            try:
                # –ï—Å–ª–∏ timestamp - —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ datetime
                if isinstance(timestamp, str):
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ datetime
                        display_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                    except ValueError:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                        try:
                            display_time = datetime.fromisoformat(timestamp)
                        except ValueError:
                            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
                            logger.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏: {timestamp}")
                            display_time = timestamp
                            time_str = timestamp
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                            continue
                # –ï—Å–ª–∏ timestamp - –æ–±—ä–µ–∫—Ç datetime, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                elif isinstance(timestamp, datetime):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –≤ –Ω–µ–º
                    if hasattr(timestamp, 'astimezone'):
                        try:
                            display_time = timestamp.astimezone(MOSCOW_TZ)
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                            display_time = timestamp
                    else:
                        display_time = timestamp
                else:
                    # –ï—Å–ª–∏ timestamp –Ω–µ —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ datetime, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫—É
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {timestamp}, —Ç–∏–ø: {type(timestamp)}")
                    continue
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if isinstance(display_time, datetime):
                    time_str = display_time.strftime('%H:%M:%S')
                else:
                    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ display_time –Ω–µ datetime, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    time_str = str(display_time)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏: {e}")
                time_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ - —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            marker_text = f"<b>–í—Ä–µ–º—è:</b> {time_str}<br><b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {lat:.6f}, {lon:.6f}"
            
            # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if loc_type == 'start':
                folium.Marker(
                    [lat, lon],
                    popup=folium.Popup(marker_text, max_width=300),
                    tooltip=f"üü¢ –ù–ê–ß–ê–õ–û {time_str}",
                    icon=start_icon
                ).add_to(m)
            elif loc_type == 'end':
                folium.Marker(
                    [lat, lon],
                    popup=folium.Popup(marker_text, max_width=300),
                    tooltip=f"üî¥ –ö–û–ù–ï–¶ {time_str}",
                    icon=end_icon
                ).add_to(m)
            elif loc_type == 'stationary':
                folium.Marker(
                    [lat, lon],
                    popup=folium.Popup(marker_text, max_width=300),
                    tooltip=f"‚è∏Ô∏è –û–°–¢–ê–ù–û–í–ö–ê {time_str}",
                    icon=stationary_icon
                ).add_to(m)
            else:
                # –î–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ —Ä–∞–∑–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã
                radius = 3
                if movement_status == 'moving' or movement_status == 'fast_moving':
                    # –î–ª—è —Ç–æ—á–µ–∫ –¥–≤–∏–∂–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
                    radius = min(3 + speed / 10, 8)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                
                folium.CircleMarker(
                    [lat, lon],
                    radius=radius,
                    color=point_color,
                    fill=True,
                    fill_color=point_color,
                    fill_opacity=0.7,
                    popup=folium.Popup(marker_text, max_width=300),
                    tooltip=f"{time_str}"
                ).add_to(m)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
            path_coords.append([lat, lon])
            path_times.append(time_str)
            path_speeds.append(speed)
            
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞: {lat:.6f}, {lon:.6f}, {time_str}, {loc_type}, {speed:.1f} –∫–º/—á")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏: {e}, –¥–∞–Ω–Ω—ã–µ: {loc_item}")
            continue
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–µ —Ç–æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏
    if len(path_coords) > 1:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–æ–µ–¥–∏–Ω—è—é—â—É—é –ª–∏–Ω–∏—é —á–µ—Ä–µ–∑ –≤—Å–µ —Ç–æ—á–∫–∏
        folium.PolyLine(
            path_coords,
            color='blue',
            weight=4,
            opacity=0.8,
            tooltip="–ú–∞—Ä—à—Ä—É—Ç"
        ).add_to(m)
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã {len(path_coords)} —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–µ–π")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ —É–±—Ä–∞–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ locations, –∞ –Ω–µ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    if user_name and date:
        map_filename = f"map_{user_name}_{date}.html"
    else:
        today_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
        map_filename = f"map_{user_name}_{today_date}.html"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é
    folium.LayerControl().add_to(m)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã
    m.get_root().html.add_child(folium.Element('''
        <style>
        .leaflet-container {
            height: 100vh;
            width: 100%;
            max-width: 100%;
            max-height: 100%;
        }
        </style>
    '''))
    
    # –õ–µ–≥–µ–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É
    m.save(map_filename)
    logger.info(f"–ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {map_filename}")
    
    return map_filename

def generate_csv_report(user_id, date=None, html_format=False):
    """Generate a CSV or HTML report for a user's activity on a specific date
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ 'YYYY-MM-DD', –µ—Å–ª–∏ None - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        html_format: –ï—Å–ª–∏ True, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç HTML-–≤–µ—Ä—Å–∏—é –æ—Ç—á–µ—Ç–∞
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞ (CSV –∏–ª–∏ HTML)
    """
    from database import get_user_status_history, get_today_locations_for_user, get_active_location_sessions, mark_session_ended
    from models import get_user_name_by_id, get_timeoff_stats_for_user, get_timeoff_requests_for_user
    from config import STATUS_OPTIONS
    
    # If date not provided, use today
    if not date:
        date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
    
    # Get user name
    user_name = get_user_name_by_id(user_id) or f"User {user_id}"
    
    logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {user_name} (ID: {user_id}) –∑–∞ {date}")
    
    # –ü–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä–æ–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
    if date == datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d'):  # –¢–æ–ª—å–∫–æ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
        try:
            active_sessions = get_active_location_sessions(user_id)
            for session_id in active_sessions:
                mark_session_ended(session_id, user_id)
                logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è {session_id} –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
    
    # Get status history for the specified date
    status_history = get_user_status_history(user_id, date=date)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(status_history)} –∑–∞–ø–∏—Å–µ–π –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
    logger.debug(f"–ó–∞–ø–∏—Å–∏ –æ —Å—Ç–∞—Ç—É—Å–∞—Ö: {status_history}")
    
    # Get location history for the specified date
    locations = get_today_locations_for_user(user_id, date=date)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(locations)} –∑–∞–ø–∏—Å–µ–π –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
    logger.debug(f"–ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏: {locations[:5] if locations else []}")
    
    # Get timeoff statistics
    timeoff_stats = get_timeoff_stats_for_user(user_id, date=date)
    
    # Prepare data for unified report
    report_data = []
    
    # Add timeoff statistics if there are any requests
    if timeoff_stats['total'] > 0:
        report_data.append({
            'id': len(report_data) + 1,
            'name': user_name,
            'user_id': user_id,
            'event_type': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≥—É–ª–æ–≤',
            'value': f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {timeoff_stats['total']}, –û–¥–æ–±—Ä–µ–Ω–æ: {timeoff_stats['approved']}, –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {timeoff_stats['rejected']}, –û–∂–∏–¥–∞–µ—Ç: {timeoff_stats['pending']}",
            'timestamp': datetime.now(MOSCOW_TZ)
        })
        
        # Get detailed timeoff requests for this date
        timeoff_requests = get_timeoff_requests_for_user(user_id)
        for req_id, reason, request_time, status, response_time in timeoff_requests:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ request_time –æ–±—ä–µ–∫—Ç–æ–º datetime –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
            if isinstance(request_time, str):
                try:
                    req_timestamp = datetime.fromisoformat(request_time)
                except ValueError:
                    try:
                        req_timestamp = datetime.strptime(request_time, '%Y-%m-%d %H:%M:%S')
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å timestamp –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–≥—É–ª–∞: {e}")
                        req_timestamp = datetime.now(MOSCOW_TZ)
            else:
                req_timestamp = request_time
                
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞—Ç–æ–π –æ—Ç—á–µ—Ç–∞
            if req_timestamp.strftime('%Y-%m-%d') == date:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç–≥—É–ª–∞ –≤ –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                status_texts = {
                    'pending': '–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è',
                    'approved': '–û–¥–æ–±—Ä–µ–Ω–æ',
                    'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
                }
                status_text = status_texts.get(status, status)
                
                report_data.append({
                    'id': len(report_data) + 1,
                    'name': user_name,
                    'user_id': user_id,
                    'event_type': '–ó–∞–ø—Ä–æ—Å –æ—Ç–≥—É–ª–∞',
                    'value': f"–ü—Ä–∏—á–∏–Ω–∞: {reason}. –°—Ç–∞—Ç—É—Å: {status_text}",
                    'timestamp': req_timestamp
                })
    
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–≤–∫–ª—é—á–∞—è —Å–º–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã)
    status_translations = {
        "office": "üè¢ –í –æ—Ñ–∏—Å–µ",
        "sick": "üè• –ù–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º",
        "vacation": "üèñ –í –æ—Ç–ø—É—Å–∫–µ",
        "to_night": "üåÉ –í –Ω–æ—á—å",
        "from_night": "üåô –° –Ω–æ—á–∏",
        "home": "üè† –î–æ–º–æ–π",
        "night_shift_start": "üåÉ –í –Ω–æ—á—å",
        "night_shift_end": "üåô –° –Ω–æ—á–∏"
    }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º STATUS_OPTIONS –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ç–∞–º —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è
    for key, value in STATUS_OPTIONS.items():
        status_translations[key] = value
    
    # Process status updates
    for status, timestamp in status_history:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ timestamp –≤ datetime, –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–æ–∫–∞
            if isinstance(timestamp, str):
                try:
                    timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    try:
                        timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S.%f')
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å timestamp —Å—Ç–∞—Ç—É—Å–∞: {e}")
                        continue
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            status_display = status_translations.get(status, status)
            
            report_data.append({
                'id': len(report_data) + 1,
                'name': user_name,
                'user_id': user_id,
                'event_type': '–°—Ç–∞—Ç—É—Å',
                'value': status_display,
                'timestamp': timestamp
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}, –¥–∞–Ω–Ω—ã–µ: {status}, {timestamp}")
            continue
    
    # Process location updates
    for loc in locations:
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
            if len(loc) >= 5:  # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å 5 –ø–æ–ª—è–º–∏
                lat, lon, ts, session_id, loc_type = loc
            elif len(loc) >= 4:  # –§–æ—Ä–º–∞—Ç —Å 4 –ø–æ–ª—è–º–∏
                lat, lon, ts, session_id = loc
                loc_type = 'intermediate'
            elif len(loc) >= 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å 3 –ø–æ–ª—è–º–∏
                lat, lon, ts = loc[:3]
                loc_type = 'intermediate'
                session_id = None
            else:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø–∏—Å–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏: {loc}")
                continue
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if isinstance(lat, str):
                lat = float(lat)
            if isinstance(lon, str):
                lon = float(lon)
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ timestamp –≤ datetime, –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–æ–∫–∞
            if isinstance(ts, str):
                try:
                    ts = datetime.strptime(ts, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    try:
                        ts = datetime.strptime(ts, '%Y-%m-%d %H:%M:%S.%f')
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å timestamp –ª–æ–∫–∞—Ü–∏–∏: {e}")
                        continue
            
            # –ü–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–æ–≤ –ª–æ–∫–∞—Ü–∏–π –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫
            location_type_translations = {
                'start': '–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏',
                'intermediate': '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞',
                'end': '–ö–æ–Ω–µ—Ü —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏'
            }
            
            location_type_display = location_type_translations.get(loc_type, loc_type)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ—Ç—á–µ—Ç —Å —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            report_data.append({
                'id': len(report_data) + 1,
                'name': user_name,
                'user_id': user_id,
                'event_type': f'–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ({location_type_display})',
                'value': f"{lat:.6f},{lon:.6f}",  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                'timestamp': ts
            })
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏: {lat:.6f}, {lon:.6f}, {ts}, {loc_type}")
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}, –¥–∞–Ω–Ω—ã–µ: {loc}")
            continue
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    report_data.sort(key=lambda x: x['timestamp'])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º id –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
    for i, item in enumerate(report_data):
        item['id'] = i + 1
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    from datetime import timedelta
    import pytz
    
    def format_time_moscow(dt):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º UTC —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)
            moscow_offset = 3  # —á–∞—Å—ã
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ naive datetime –æ–±—ä–µ–∫—Ç–æ–≤ (–±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)
            if hasattr(dt, 'tzinfo') and dt.tzinfo is None:
                # –ï—Å–ª–∏ —É datetime –Ω–µ—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, –∏—Å—Ö–æ–¥–∏–º –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ —ç—Ç–æ UTC
                # –∏ –¥–æ–±–∞–≤–ª—è–µ–º 3 —á–∞—Å–∞ –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                moscow_time = dt + timedelta(hours=moscow_offset)
            elif hasattr(dt, 'astimezone'):
                # –ï—Å–ª–∏ —É datetime –µ—Å—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ UTC —Å–Ω–∞—á–∞–ª–∞,
                # –∞ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                utc_time = dt.astimezone(pytz.UTC)
                moscow_time = utc_time + timedelta(hours=moscow_offset)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ datetime –æ–±—ä–µ–∫—Ç, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                return str(dt)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            return moscow_time.strftime('%Y-%m-%d %H:%M:%S')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}, —Ç–∏–ø: {type(dt)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            return str(dt)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        if report_data:
            df = pd.DataFrame(report_data)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º DataFrame —Å –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å—å—é —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id}) –∑–∞ {date}")
            df = pd.DataFrame([{
                'id': 1,
                'name': user_name,
                'user_id': user_id,
                'event_type': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                'value': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
                'timestamp': datetime.now(MOSCOW_TZ)
            }])
            
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        df = df.rename(columns={
            'id': 'ID',
            'name': '–§–ò–û',
            'user_id': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'event_type': '–¢–∏–ø —Å–æ–±—ã—Ç–∏—è',
            'value': '–ó–Ω–∞—á–µ–Ω–∏–µ',
            'timestamp': '–í—Ä–µ–º—è'
        })
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫ —Å—Ç–æ–ª–±—Ü—É "–í—Ä–µ–º—è"
        df['–í—Ä–µ–º—è'] = df['–í—Ä–µ–º—è'].apply(format_time_moscow)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV —Ñ–∞–π–ª
        csv_filename = f"report_{user_id}_{date}.csv"
        df.to_csv(csv_filename, index=False, encoding='utf-8')
        logger.info(f"CSV –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {csv_filename}, {len(report_data) if report_data else 1} –∑–∞–ø–∏—Å–µ–π")
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω HTML —Ñ–æ—Ä–º–∞—Ç, —Å–æ–∑–¥–∞–µ–º –∏ HTML-–≤–µ—Ä—Å–∏—é
        if html_format:
            html_filename = f"report_{user_id}_{date}.html"
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –¥–∞—Ç–µ
            html_header = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="utf-8">
                <title>–û—Ç—á–µ—Ç –¥–ª—è {user_name} –∑–∞ {date}</title>
                <style>
                    body {{ 
                        font-family: 'Segoe UI', Arial, sans-serif; 
                        margin: 20px;
                        background-color: #f9f9f9;
                        color: #333;
                        font-size: 16px;
                    }}
                    h1 {{ 
                        color: #2c3e50; 
                        padding-bottom: 10px;
                        border-bottom: 2px solid #3498db;
                        margin-bottom: 20px;
                        font-size: 24px;
                    }}
                    table {{ 
                        border-collapse: collapse; 
                        width: 100%; 
                        margin-top: 20px; 
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                        background-color: white;
                        font-size: 14px;
                    }}
                    th, td {{ 
                        border: 1px solid #ddd; 
                        padding: 12px; 
                        text-align: left;
                    }}
                    th {{ 
                        background-color: #3498db; 
                        font-weight: bold;
                        color: white;
                        font-size: 15px;
                    }}
                    tr:nth-child(even) {{ 
                        background-color: #f2f2f2; 
                    }}
                    .status-event {{ 
                        background-color: #d6eaf8; 
                        font-weight: bold;
                    }}
                    .location-event {{ 
                        background-color: #eafaf1; 
                    }}
                    .timestamp {{
                        white-space: nowrap;
                        font-family: monospace;
                        font-size: 14px;
                    }}
                    p {{
                        line-height: 1.5;
                        margin-bottom: 15px;
                        font-size: 16px;
                    }}
                    strong {{
                        font-weight: 600;
                        color: #2c3e50;
                    }}
                </style>
            </head>
            <body>
                <h1>–û—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</h1>
                <p><strong>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</strong> {user_name} (ID: {user_id})</p>
                <p><strong>–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞:</strong> {date}</p>
                <p><strong>–í—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S')}</p>
            """
            
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è HTML-–æ—Ç—á–µ—Ç–∞
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å timestamp –∫ —Å—Ç–æ–ª–±—Ü—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, col in enumerate(df.columns):
                if col == '–í—Ä–µ–º—è':
                    df[col] = df[col].apply(lambda x: f'<span class="timestamp">{x}</span>')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ HTML —Ç–∞–±–ª–∏—Ü—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º escape=False —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML-—Ç–µ–≥–∏
            table_html = df.to_html(index=False, classes='report-table', escape=False)
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏ –Ω–∞ —Å–≤–æ–∏ –¥–ª—è —Å—Ç—Ä–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
            table_html = table_html.replace('<tr>', '<tr class="status-event">')
            table_html = table_html.replace('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '</tr><tr class="location-event">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º HTML —Ñ–∞–π–ª
            html_footer = """
            </body>
            </html>
            """
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π HTML –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(html_filename, 'w', encoding='utf-8') as f:
                f.write(html_header + table_html + html_footer)
            
            logger.info(f"HTML –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {html_filename}")
            # –£–¥–∞–ª—è–µ–º CSV-—Ñ–∞–π–ª, —Ç.–∫. –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
            if os.path.exists(csv_filename):
                os.remove(csv_filename)
                logger.info(f"–£–¥–∞–ª–µ–Ω –Ω–µ–Ω—É–∂–Ω—ã–π CSV-—Ñ–∞–π–ª: {csv_filename}")
            return html_filename
        
        return csv_filename
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DataFrame –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ DataFrame
        csv_filename = f"report_{user_id}_{date}.csv"
        with open(csv_filename, 'w', encoding='utf-8') as f:
            f.write("ID,–§–ò–û,–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,–¢–∏–ø —Å–æ–±—ã—Ç–∏—è,–ó–Ω–∞—á–µ–Ω–∏–µ,–í—Ä–µ–º—è\n")
            if not report_data:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                time_str = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S')
                f.write(f"1,{user_name},{user_id},–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è,–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥,{time_str}\n")
            else:
                for item in report_data:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                    time_str = format_time_moscow(item['timestamp'])
                    f.write(f"{item['id']},{item['name']},{item['user_id']},{item['event_type']},{item['value']},{time_str}\n")
        
        logger.info(f"–†–µ–∑–µ—Ä–≤–Ω—ã–π CSV –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {csv_filename}")
        return csv_filename

def get_admin_keyboard():
    """Create admin keyboard with admin functions"""
    keyboard = [
        [InlineKeyboardButton("üëÅÔ∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="admin_locate")],
        [InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ", callback_data="admin_requests")],
        [InlineKeyboardButton("üìä –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="admin_report")],
        [InlineKeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏", callback_data="admin_shifts")],
        [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="admin_daily_reports")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≥—É–ª–æ–≤", callback_data="admin_timeoff_stats")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")]
    ]
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:")
    for row in keyboard:
        for button in row:
            logger.info(f"- –ö–Ω–æ–ø–∫–∞: {button.text}, callback_data: {button.callback_data}")
    
    return InlineKeyboardMarkup(keyboard)

def handle_error(update, context):
    """Log errors caused by updates."""
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.effective_message:
        update.effective_message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª."
        )
        
def generate_map(user_id, date=None):
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç create_direct_map –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD', –µ—Å–ª–∏ None - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        
    Returns:
        –ò–º—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç—ã
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ fixed_map_generator –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –∫–∞—Ä—Ç
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        from fixed_map_generator import create_direct_map
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
        if not date:
            date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
            
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ –¥–∞—Ç—É {date}")
            
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        map_filename = create_direct_map(user_id, date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if map_filename and os.path.exists(map_filename):
            logger.info(f"–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {map_filename}")
            return map_filename
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {e}")
        return None
