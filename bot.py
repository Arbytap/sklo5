import logging
import os
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, ParseMode, 
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, 
    CallbackContext, CallbackQueryHandler, ConversationHandler
)
from datetime import datetime, timedelta
import pandas as pd
import folium
import io

from fixed_map_generator import create_direct_map
# Import our modules
from config import TOKEN, BOT_MODE, WEBHOOK_URL, PORT, ADMIN_ID, MOSCOW_TZ, STATUS_OPTIONS
from database import init_db, save_location, save_status, get_user_locations, get_user_status_history, mark_session_ended
from models import add_or_update_user_mapping, get_user_name_by_id, update_morning_check, is_user_in_night_shift
from utils import log_update, format_bot_help, is_workday, is_admin, create_map_for_user, generate_csv_report
from scheduled_tasks import morning_check_task, reset_morning_checks_task, daily_report_task
from user_management import load_user_mappings_from_file, get_admin_user_selector, find_user_location
from timeoff_requests import register_timeoff_handlers

# Configure logging
logger = logging.getLogger(__name__)

def get_user_keyboard(user_id):
    """Create a custom keyboard based on user's role"""
    # Basic keyboard with status buttons
    keyboard = [
        [KeyboardButton(STATUS_OPTIONS["office"]), KeyboardButton(STATUS_OPTIONS["home"])],
        [KeyboardButton(STATUS_OPTIONS["sick"]), KeyboardButton(STATUS_OPTIONS["vacation"])],
        [KeyboardButton(STATUS_OPTIONS["to_night"]), KeyboardButton(STATUS_OPTIONS["from_night"])],
        [KeyboardButton("üìù –û—Ç–ø—Ä–æ—Å–∏—Ç—å—Å—è")]
    ]
    
    # Add admin buttons if user is admin
    if is_admin(user_id):
        keyboard.append([KeyboardButton("üë§ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])
    
    return keyboard

def start(update: Update, context: CallbackContext):
    """Handle the /start command"""
    user = update.effective_user
    
    # Log the new user
    logger.info(f"New user: {user.id} ({user.username or 'No username'})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ ID
    user_name = get_user_name_by_id(user.id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ñ–∞–π–ª–µ, –Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É
    if not user_name:
        user_mappings = load_user_mappings_from_file(update_db=False)
        user_name = user_mappings.get(user.id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if user_name:
            add_or_update_user_mapping(user.id, user_name)
    
    if user_name:
        welcome_msg = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n\n"
            f"üìç –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé (–≤–ª–æ–∂–µ–Ω–∏–µ) —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"2. –í—ã–±–µ—Ä–∏—Ç–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è' üìç\n"
            f"3. –ù–∞–∂–º–∏—Ç–µ '–¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏\n"
            f"4. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'\n\n"
            f"‚ùóÔ∏è –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –≤—ã –∑–∞–∫—Ä—ã–ª–∏ —á–∞—Ç —Å –±–æ—Ç–æ–º, —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å—Å—è. "
            f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —à–∞–≥–∏ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞."
        )
    else:
        welcome_msg = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n\n"
            f"–í–∞—à ID: {user.id}\n"
            f"‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É."
        )
    
    # Create keyboard based on user role
    keyboard = get_user_keyboard(user.id)
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # Send welcome message with keyboard
    update.message.reply_text(welcome_msg, reply_markup=reply_markup)

def help_command(update: Update, context: CallbackContext):
    """Handle the /help command"""
    help_text = format_bot_help()
    update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
def timeoff_stats_command(update: Update, context: CallbackContext):
    """Handle the /timeoff_stats command - show timeoff statistics"""
    user_id = update.effective_user.id
    user_name = get_user_name_by_id(user_id) or update.effective_user.first_name
    
    # Get timeoff statistics for the user
    from models import get_timeoff_stats_for_user
    
    # Default period - last 30 days
    days = 30
    
    # Check if user provided a different period
    if context.args and len(context.args) > 0:
        try:
            days = int(context.args[0])
            if days <= 0:
                days = 30  # Default if invalid
        except ValueError:
            days = 30  # Default if invalid
    
    stats = get_timeoff_stats_for_user(user_id, days=days)
    
    # Create the statistics message
    if stats['total'] > 0:
        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–≥—É–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π\n\n"
            f"üë§ {user_name}\n"
            f"üìë –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total']}\n"
            f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
            f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: {stats['pending']}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /timeoff_stats [–¥–Ω–∏] –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞."
        )
    else:
        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–≥—É–ª\n\n"
            f"üë§ {user_name}\n"
            f"‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–≥—É–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /timeoff_stats [–¥–Ω–∏] –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞."
        )
    
    update.message.reply_text(message)

def status_command(update: Update, context: CallbackContext):
    """Handle the /status command - allow user to set status"""
    keyboard = get_user_keyboard(update.effective_user.id)
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:",
        reply_markup=reply_markup
    )

def handle_status_message(update: Update, context: CallbackContext):
    """Handle status messages from keyboard buttons"""
    if not update.message or not update.message.text:
        logger.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º")
        return
        
    message_text = update.message.text
    user_id = update.effective_user.id
    user_name = get_user_name_by_id(user_id) or update.effective_user.first_name
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–æ—Å–∏—Ç—å—Å—è" —Ç–µ–ø–µ—Ä—å –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ timeoff_requests.py
    if message_text == "üìù –û—Ç–ø—Ä–æ—Å–∏—Ç—å—Å—è":
        # –ú—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ –∑–¥–µ—Å—å, —Ç.–∫. –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return
    
    # Check if message is a status option
    status_map = {value: key for key, value in STATUS_OPTIONS.items()}
    status_key = status_map.get(message_text)
    
    if not status_key:
        return  # Not a status message
    
    # Save the status
    save_status(user_id, status_key)
    
    # Mark morning check as completed
    today_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
    update_morning_check(user_id, today_date, checked_in=True)
    
    # Check if user was tracking location
    location_tracking = context.chat_data.get(f"location_tracking_{user_id}", False)
    session_id = context.chat_data.get(f"location_session_{user_id}")
    
    # Respond based on status
    if status_key == "home":
        # User is going home, stop location tracking if active
        if location_tracking and session_id:
            # Mark location session as ended
            try:
                # If they sent a final location, use it for ending
                if update.message.location:
                    location = update.message.location
                    mark_session_ended(session_id, user_id, location.latitude, location.longitude)
                else:
                    # Just mark the last tracked location as end
                    mark_session_ended(session_id, user_id)
                
                # Clear tracking state
                context.chat_data[f"location_tracking_{user_id}"] = False
                context.chat_data[f"location_session_{user_id}"] = None
                
                update.message.reply_text(
                    f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {message_text}\n"
                    f"‚úÖ –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
                    f"–•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞, {user_name}!"
                )
            except Exception as e:
                logger.error(f"Error ending location session: {e}")
                update.message.reply_text(
                    f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {message_text}\n"
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏: {str(e)}\n"
                    f"–•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞, {user_name}!"
                )
        else:
            # No active location tracking
            update.message.reply_text(
                f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {message_text}\n"
                f"–•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞, {user_name}!"
            )
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –¥–µ–Ω—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ—Ç —Ñ–∞–∫—Ç
        # –Ω–æ –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –∑–∞–∫–æ–Ω—á–∏–ª –¥–µ–Ω—å")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        try:
            from database import get_active_location_sessions
            active_sessions = get_active_location_sessions(user_id)
            if active_sessions:
                for session_id in active_sessions:
                    mark_session_ended(session_id, user_id)
                    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—Ç—ã
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –¥–µ–Ω—å
        context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–∫–æ–Ω—á–∏–ª –¥–µ–Ω—å ({today_date})"
        )
    elif status_key == "night_shift_start":
        # User is starting night shift, add to night shift
        today_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
        tomorrow_date = (datetime.now(MOSCOW_TZ) + timedelta(days=1)).strftime('%Y-%m-%d')
        
        try:
            from models import add_night_shift
            add_night_shift(user_id, today_date, tomorrow_date)
            update.message.reply_text(
                f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {message_text}\n"
                f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –Ω–æ—á–Ω—É—é —Å–º–µ–Ω—É —Å {today_date} –ø–æ {tomorrow_date}.\n"
                f"–£—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–æ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—É—Ç–æ–∫."
            )
        except Exception as e:
            logger.error(f"Error adding night shift: {e}")
            update.message.reply_text(
                f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {message_text}\n"
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –Ω–æ—á–Ω—É—é —Å–º–µ–Ω—É: {str(e)}"
            )
    
    elif status_key == "night_shift_end":
        # User is ending night shift
        # –í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –º—ã –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å –Ω–æ—á–Ω—É—é —Å–º–µ–Ω—É –∏–∑ –ë–î, 
        # –Ω–æ —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞ is_user_in_night_shift 
        # —É—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã
        today_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω–µ
            if is_user_in_night_shift(user_id):
                # –û—Ç–º–µ—á–∞–µ–º —É—Ç—Ä–µ–Ω–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–≥–æ–¥–Ω—è
                update_morning_check(user_id, today_date, checked_in=True)
                
                update.message.reply_text(
                    f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {message_text}\n"
                    f"‚úÖ –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è."
                )
            else:
                update.message.reply_text(
                    f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {message_text}\n"
                    f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –í—ã –Ω–µ –±—ã–ª–∏ –æ—Ç–º–µ—á–µ–Ω—ã –≤ –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω–µ."
                )
        except Exception as e:
            logger.error(f"Error handling night shift end: {e}")
            update.message.reply_text(
                f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {message_text}\n"
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã: {str(e)}"
            )
    
    else:
        # For other statuses, just confirm
        update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {message_text}")
    
    logger.info(f"User {user_id} set status to {status_key}")

def handle_location(update: Update, context: CallbackContext):
    """Handle location updates from users"""
    if not update.message or not update.message.location:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∂–∏–≤–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if update.edited_message and update.edited_message.location:
            message = update.edited_message
            is_live_location = True
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        else:
            logger.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–∫–∞—Ü–∏–µ–π")
            return
    else:
        message = update.message
        is_live_location = False
    
    user_id = message.from_user.id
    user_name = get_user_name_by_id(user_id) or message.from_user.first_name
    location = message.location
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É chat_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
    if user_id not in context.chat_data:
        context.chat_data[user_id] = {}
        context.chat_data[user_id]['movement_status'] = 'unknown'
        context.chat_data[user_id]['stationary_duration'] = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    lat = location.latitude
    lon = location.longitude
    current_time = datetime.now()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    location_type = 'intermediate'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if 'last_location' in context.chat_data[user_id]:
        prev_loc = context.chat_data[user_id]['last_location']
        prev_lat = prev_loc.get('latitude')
        prev_lon = prev_loc.get('longitude')
        prev_time_str = prev_loc.get('timestamp')
        
        if prev_lat and prev_lon and prev_time_str:
            # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
            from math import sin, cos, sqrt, atan2, radians
            
            R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
            
            lat1 = radians(float(prev_lat))
            lon1 = radians(float(prev_lon))
            lat2 = radians(float(lat))
            lon2 = radians(float(lon))
            
            dlon = lon2 - lon1
            dlat = lat2 - lat1
            
            a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
            c = 2 * atan2(sqrt(a), sqrt(1 - a))
            
            distance = R * c  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –æ—Ç–º–µ—Ç–∫–∞–º–∏
            prev_time = datetime.fromisoformat(prev_time_str)
            time_diff_seconds = (current_time - prev_time).total_seconds()
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–≤–∏–∂–µ–Ω–∏—è
            if distance < 10:  # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 10 –º–µ—Ç—Ä–æ–≤
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ –∏–ª–∏ –ø–æ—á—Ç–∏ –Ω–∞ –º–µ—Å—Ç–µ
                context.chat_data[user_id]['stationary_duration'] += time_diff_seconds
                if context.chat_data[user_id]['stationary_duration'] > 300:  # 5 –º–∏–Ω—É—Ç –Ω–∞ –º–µ—Å—Ç–µ
                    context.chat_data[user_id]['movement_status'] = 'stationary'
                    location_type = 'stationary'
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if context.chat_data[user_id]['stationary_duration'] > 1800 and not context.chat_data[user_id].get('admin_notified', False):
                        try:
                            from config import ADMIN_ID
                            context.bot.send_message(
                                chat_id=ADMIN_ID,
                                text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç.\n"
                                     f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}\n"
                                     f"<a href='https://maps.google.com/maps?q={lat},{lon}'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>",
                                parse_mode='HTML'
                            )
                            context.chat_data[user_id]['admin_notified'] = True
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–≤–∏–∂–µ–Ω–∏–∏
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á
                speed = (distance / time_diff_seconds) * 3.6 if time_diff_seconds > 0 else 0
                
                context.chat_data[user_id]['movement_status'] = 'moving'
                context.chat_data[user_id]['stationary_duration'] = 0
                context.chat_data[user_id]['admin_notified'] = False
                location_type = 'moving'
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–æ—Ä–æ—Å—Ç–∏
                context.chat_data[user_id]['speed'] = speed
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –≤ –¥–≤–∏–∂–µ–Ω–∏–∏, —Å–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} –∫–º/—á, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.1f} –º")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ chat_data –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    context.chat_data[user_id]['last_location'] = {
        'latitude': lat,
        'longitude': lon,
        'timestamp': current_time.isoformat(),
        'movement_status': context.chat_data[user_id].get('movement_status', 'unknown'),
        'speed': context.chat_data[user_id].get('speed', 0)
    }
    
    # Check if user just started sharing location (first point in a new session)
    start_new_session = False
    
    # Store user state for location sharing in chat_data
    if not context.chat_data.get(f"location_tracking_{user_id}"):
        start_new_session = True
        context.chat_data[f"location_tracking_{user_id}"] = True
    
    # Save location to database
    if start_new_session:
        # Create new session and mark this as start point
        session_id = save_location(user_id, lat, lon, location_type='start')
        context.chat_data[f"location_session_{user_id}"] = session_id
        
        if not is_live_location:
            message.reply_text(
                "‚úÖ –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—á–∞—Ç–∞. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ 'üè† –î–æ–º–æ–π'."
            )
    else:
        # Continue existing session
        session_id = context.chat_data.get(f"location_session_{user_id}")
        save_location(user_id, lat, lon, session_id=session_id, location_type=location_type)
        
        if not is_live_location:
            message.reply_text("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    # Mark morning check as completed
    today_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
    update_morning_check(user_id, today_date, checked_in=True)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–≤–∏–∂–µ–Ω–∏–∏
    movement_status = context.chat_data[user_id].get('movement_status', 'unknown')
    speed = context.chat_data[user_id].get('speed', 0)
    logger.info(f"Saved location for user {user_name} [{lat}, {lon}], status: {movement_status}, speed: {speed:.1f} –∫–º/—á")

def handle_admin_panel(update: Update, context: CallbackContext):
    """Handle admin panel button press"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    from utils import get_admin_keyboard
    
    # Send admin panel
    update.message.reply_text(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

def handle_admin_callback(update: Update, context: CallbackContext):
    """Handle admin panel callback buttons"""
    if not update.callback_query:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ callback")
        return
        
    query = update.callback_query
    query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º callback data
    callback_data = query.data
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ admin_callback: {callback_data}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—è from_user –≤ callback_query
    if not hasattr(query, 'from_user') or query.from_user is None:
        logger.error("–û–±—ä–µ–∫—Ç from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ callback_query")
        return
    
    user_id = query.from_user.id
    logger.info(f"User ID –≤ admin_callback: {user_id}")
    
    # Check if user is admin
    from user_management import is_admin, get_admin_user_selector
    if not is_admin(user_id):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
        
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback: {callback_data}")
    
    try:
        if callback_data == "admin_locate":
            # Show user selector for location tracking
            query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
                reply_markup=get_admin_user_selector("locate_user")
            )
        
        elif callback_data == "admin_requests":
            # Show pending time-off requests
            from timeoff_requests import get_pending_timeoff_requests
            
            requests = get_pending_timeoff_requests()
            
            if not requests:
                query.edit_message_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
                return
            
            query.edit_message_text("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫...")
            
            # Use show_pending_timeoff_requests via a direct message
            context.bot.send_message(
                chat_id=user_id,
                text="–ó–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:"
            )
            
            from timeoff_requests import show_pending_timeoff_requests
            show_pending_timeoff_requests(update, context)
        
        elif callback_data == "admin_report":
            # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
            keyboard = [
                [InlineKeyboardButton("–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report_date_today")],
                [InlineKeyboardButton("–ó–∞ –≤—á–µ—Ä–∞", callback_data="report_date_yesterday")],
                [InlineKeyboardButton("–ó–∞ 7 –¥–Ω–µ–π", callback_data="report_date_week")],
                [InlineKeyboardButton("–î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="report_date_custom")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            
            query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        elif callback_data == "report_date_today":
            # –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            today = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['selected_report_date'] = today
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–∞—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {today}")
            
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                from user_management import get_admin_user_selector
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å report_user_date_ –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
                user_selector = get_admin_user_selector("report_user_date")
                logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ get_admin_user_selector")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
                keyboard_buttons = user_selector.inline_keyboard
                keyboard_buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="admin_report")])
                
                message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ {today}:"
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
                
                query.edit_message_text(
                    message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard_buttons)
                )
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
                query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                import traceback
                logger.error(traceback.format_exc())
            
        elif callback_data == "report_date_yesterday":
            # –û—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞
            yesterday = (datetime.now(MOSCOW_TZ) - timedelta(days=1)).strftime('%Y-%m-%d')
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤—á–µ—Ä–∞ ({yesterday})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['selected_report_date'] = yesterday
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–∞—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {yesterday}")
            
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                from user_management import get_admin_user_selector
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å report_user_date_ –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
                user_selector = get_admin_user_selector("report_user_date")
                logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ get_admin_user_selector")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
                keyboard_buttons = user_selector.inline_keyboard
                keyboard_buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="admin_report")])
                
                message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ {yesterday}:"
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
                
                query.edit_message_text(
                    message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard_buttons)
                )
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤—á–µ—Ä–∞: {e}")
                query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                import traceback
                logger.error(traceback.format_exc())
            
        elif callback_data == "report_date_week":
            # –û—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            today = datetime.now(MOSCOW_TZ)
            week_ago = today - timedelta(days=6)  # 7 –¥–Ω–µ–π –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è
            
            today_str = today.strftime('%Y-%m-%d')
            week_ago_str = week_ago.strftime('%Y-%m-%d')
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ ({week_ago_str} - {today_str})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['report_period_start'] = week_ago_str
            context.user_data['report_period_end'] = today_str
            context.user_data['report_type'] = 'week'
            
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                from user_management import get_admin_user_selector
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å report_user_week_ –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
                user_selector = get_admin_user_selector("report_user_week")
                logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ get_admin_user_selector")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
                keyboard_buttons = user_selector.inline_keyboard
                keyboard_buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="admin_report")])
                
                message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {week_ago_str} - {today_str}:"
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
                
                query.edit_message_text(
                    message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard_buttons)
                )
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
                query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                import traceback
                logger.error(traceback.format_exc())
            
        elif callback_data == "report_date_custom":
            # –ó–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
            # –í Telegram –Ω–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –ø–æ—ç—Ç–æ–º—É –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é
            query.edit_message_text(
                "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/report –ì–ì–ì–ì-–ú–ú-–î–î\n\n"
                "–ü—Ä–∏–º–µ—Ä: /report 2025-05-01",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_report")]])
            )
            
        elif callback_data == "admin_daily_reports":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
            
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                from user_management import get_admin_user_selector
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å daily_report_user_ –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
                user_selector = get_admin_user_selector("daily_report_user")
                logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ get_admin_user_selector")
                
                message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:"
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
                
                query.edit_message_text(
                    message_text,
                    reply_markup=user_selector
                )
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
                query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                import traceback
                logger.error(traceback.format_exc())
        
        elif callback_data == "admin_shifts":
            # Manage night shifts
            query.edit_message_text(
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ—á–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            )
        elif callback_data == "admin_timeoff_stats":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≥—É–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard = []
            
            from models import get_all_users, get_timeoff_stats_for_user
            users = get_all_users()
            
            if not users:
                query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—É–ª–æ–≤.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–≥—É–ª –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–≥—É–ª*\n\n"
            
            # –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            periods = [
                ("7 –¥–Ω–µ–π", 7),
                ("30 –¥–Ω–µ–π", 30),
                ("90 –¥–Ω–µ–π", 90),
                ("–í—Å–µ –∑–∞–ø–∏—Å–∏", 365)
            ]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            for period_name, days in periods:
                button_text = f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_name}" if period_name != "–í—Å–µ –∑–∞–ø–∏—Å–∏" else "–í—Å–µ –∑–∞–ø–∏—Å–∏"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"timeoff_stats_period_{days}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
            
            query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—É–ª–æ–≤:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        elif callback_data == "admin_users":
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            from user_management import handle_users_management
            handle_users_management(update, context)
        
        elif callback_data == "admin_delete_user":
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from user_management import handle_delete_user_selection
            handle_delete_user_selection(update, context)
            
        elif callback_data == "admin_change_rights":
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from user_management import handle_change_rights_selection
            handle_change_rights_selection(update, context)
            
        elif callback_data == "admin_back":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            from utils import get_admin_keyboard
            query.edit_message_text(
                "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_admin_keyboard()
            )
        elif callback_data.startswith("timeoff_stats_period_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—É–ª–æ–≤
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ callback_data
                days = int(callback_data.split("_")[-1])
                
                from models import get_all_users, get_timeoff_stats_for_user
                users = get_all_users()
                
                if not users:
                    query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—É–ª–æ–≤.")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–≥—É–ª –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                period_text = f"–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π" if days < 365 else "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"
                message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–≥—É–ª {period_text}*\n\n"
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                total_stats = {"total": 0, "approved": 0, "rejected": 0, "pending": 0}
                user_stats = []
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"–°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ {days} –¥–Ω–µ–π")
                
                for user_id, user_name, is_admin in users:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    logger.info(f"–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name} (ID: {user_id})")
                    
                    try:
                        stats = get_timeoff_stats_for_user(user_id, days=days)
                        
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {user_name}: {stats}")
                        
                        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å—ã, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        if stats['total'] > 0:
                            user_stats.append((user_name, stats))
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            total_stats['total'] += stats['total']
                            total_stats['approved'] += stats['approved']
                            total_stats['rejected'] += stats['rejected']
                            total_stats['pending'] += stats['pending']
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—É–ª–æ–≤ –¥–ª—è {user_name}: {e}")
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                logger.info(f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_stats}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                message += f"*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                message += f"üìë –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_stats['total']}\n"
                message += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {total_stats['approved']}\n"
                message += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {total_stats['rejected']}\n"
                message += f"‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: {total_stats['pending']}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if user_stats:
                    message += f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:*\n"
                    for user_name, stats in user_stats:
                        message += f"üë§ {user_name}:\n"
                        message += f"  - –í—Å–µ–≥–æ: {stats['total']}, "
                        message += f"–û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}, "
                        message += f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}, "
                        message += f"–û–∂–∏–¥–∞–µ—Ç: {stats['pending']}\n"
                else:
                    message += "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–≥—É–ª –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="admin_timeoff_stats")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
                ]
                
                query.edit_message_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—É–ª–æ–≤: {e}")
                query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—É–ª–æ–≤: {str(e)}")
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ callback: {callback_data}")
            query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        try:
            query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e2}")

def handle_locate_user_callback(update: Update, context: CallbackContext):
    """Handle callback when admin selects a user to locate"""
    if not update.callback_query:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ callback")
        return
        
    query = update.callback_query
    query.answer()
    
    if not hasattr(query, 'from_user') or query.from_user is None:
        logger.error("–û–±—ä–µ–∫—Ç from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ callback_query")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
        callback_data = query.data
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback_data}")
        
        # –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ locate_user_USERID
        parts = callback_data.split("_")
        if len(parts) != 3 or not parts[2].isdigit():
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {callback_data}")
            query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        user_id = int(parts[2])
        user_name = get_user_name_by_id(user_id)
        
        if not user_name:
            user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database import get_user_locations
        locations = get_user_locations(user_id, hours_limit=24)
        
        if not locations:
            query.edit_message_text(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è {user_name} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        latest_location = locations[-1]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ get_user_locations
        if len(latest_location) >= 3:  # –ú–∏–Ω–∏–º—É–º –Ω—É–∂–Ω—ã lat, lon, timestamp
            if len(latest_location) >= 5:  # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å 5 –ø–æ–ª—è–º–∏ (id, lat, lon, timestamp, loc_type)
                loc_id, lat, lon, timestamp, loc_type = latest_location
            elif len(latest_location) >= 4:  # –§–æ—Ä–º–∞—Ç —Å 4 –ø–æ–ª—è–º–∏
                loc_id, lat, lon, timestamp = latest_location
                loc_type = 'intermediate'
            else:
                lat, lon, timestamp = latest_location[:3]
                loc_type = 'intermediate'
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(lat, str):
                lat = float(lat)
            if isinstance(lon, str):
                lon = float(lon)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º timestamp, –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–æ–∫–∞
            if isinstance(timestamp, str):
                try:
                    timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    try:
                        timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S.%f')
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å timestamp: {e}")
                        timestamp = datetime.now(MOSCOW_TZ)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –Ω–µ –æ–Ω–æ
            if hasattr(timestamp, 'astimezone'):
                timestamp = timestamp.astimezone(MOSCOW_TZ)
            
            time_str = timestamp.strftime('%Y-%m-%d %H:%M:%S')
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
            message = f"üìç –ü–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è {user_name}:\n"
            message += f"‚Ä¢ –®–∏—Ä–æ—Ç–∞: {lat:.6f}\n"
            message += f"‚Ä¢ –î–æ–ª–≥–æ—Ç–∞: {lon:.6f}\n"
            message += f"‚Ä¢ –í—Ä–µ–º—è: {time_str}\n"
            message += f"‚Ä¢ –¢–∏–ø: {loc_type}\n"
            message += f"\n<a href='https://maps.google.com/maps?q={lat},{lon}'>–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Google Maps</a>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—á–µ—Ç–∞
            keyboard = [
                [InlineKeyboardButton("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"report_user_{user_id}")],
                [InlineKeyboardButton("üó∫Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"daily_report_user_{user_id}")]
            ]
            
            query.edit_message_text(
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} [{lat}, {lon}]")
        else:
            query.edit_message_text(f"–î–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è {user_name} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ.")
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏: {latest_location}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏: {str(e)}")

def handle_report_callback(update: Update, context: CallbackContext):
    """Handle report generation for a selected user"""
    if not update.callback_query:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ callback")
        return
        
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—è from_user –≤ callback_query
    if not hasattr(query, 'from_user') or query.from_user is None:
        logger.error("–û–±—ä–µ–∫—Ç from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ callback_query")
        return
    
    if not is_admin(query.from_user.id):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        callback_data = query.data
        logger.info(f"Received callback data: {callback_data}")
        
        # –î–ª—è –æ—Ç—á–µ—Ç–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π (report_user_date_XXX)
        if callback_data.startswith("report_user_date_"):
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prefix = "report_user_date_"
            user_id_str = callback_data[len(prefix):]
            try:
                user_id = int(user_id_str)
                # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                selected_date = context.user_data.get('selected_report_date')
                if not selected_date:
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
                    selected_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
                is_daily_report = False
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ —Å –¥–∞—Ç–æ–π: {user_id}, –¥–∞—Ç–∞: {selected_date}")
            except ValueError:
                logger.error(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_id_str}' –≤ —á–∏—Å–ª–æ")
                query.edit_message_text(f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_id_str})")
                return
        # –î–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (report_user_week_XXX)
        elif callback_data.startswith("report_user_week_"):
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prefix = "report_user_week_"
            user_id_str = callback_data[len(prefix):]
            try:
                user_id = int(user_id_str)
                # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                start_date = context.user_data.get('report_period_start')
                end_date = context.user_data.get('report_period_end')
                
                if not start_date or not end_date:
                    # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º 7 –¥–Ω–µ–π –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π
                    today = datetime.now(MOSCOW_TZ)
                    week_ago = today - timedelta(days=6)
                    end_date = today.strftime('%Y-%m-%d')
                    start_date = week_ago.strftime('%Y-%m-%d')
                
                is_daily_report = False
                is_weekly_report = True
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {user_id}, –ø–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
            except ValueError:
                logger.error(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_id_str}' –≤ —á–∏—Å–ª–æ")
                query.edit_message_text(f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_id_str})")
                return
        # –î–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (daily_report_user_XXX)
        elif callback_data.startswith("daily_report_user_"):
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prefix = "daily_report_user_"
            user_id_str = callback_data[len(prefix):]
            try:
                user_id = int(user_id_str)
                selected_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')  # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
                is_daily_report = True
                is_weekly_report = False
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è daily_report: {user_id}")
            except ValueError:
                logger.error(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_id_str}' –≤ —á–∏—Å–ª–æ")
                query.edit_message_text(f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_id_str})")
                return
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (report_user_XXX)
        elif callback_data.startswith("report_user_"):
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prefix = "report_user_"
            user_id_str = callback_data[len(prefix):]
            try:
                user_id = int(user_id_str)
                selected_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')  # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
                is_daily_report = False
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {user_id}")
            except ValueError:
                logger.error(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_id_str}' –≤ —á–∏—Å–ª–æ")
                query.edit_message_text(f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_id_str})")
                return
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤: {callback_data}")
            query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return
            
        user_name = get_user_name_by_id(user_id)
        
        if not user_name:
            user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        
        query.edit_message_text(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è {user_name}...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        is_weekly_report = False
        report_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        report_file = None
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞—Ç—ã –∏ –º–µ—Ç–æ–¥—ã
        if callback_data.startswith("report_user_week_"):
            # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            is_weekly_report = True
            if 'report_period_start' in context.user_data and 'report_period_end' in context.user_data:
                start_date = context.user_data['report_period_start']
                end_date = context.user_data['report_period_end']
            else:
                # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                today = datetime.now(MOSCOW_TZ)
                week_ago = today - timedelta(days=6)
                end_date = today.strftime('%Y-%m-%d')
                start_date = week_ago.strftime('%Y-%m-%d')
                
            period_str = f"{start_date} - {end_date}"
            query.edit_message_text(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {user_name} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period_str}...")
            
            # TODO: –í –±—É–¥—É—â–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)
            report_date = end_date
            report_file = generate_csv_report(user_id, date=report_date)
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∑–∞ –¥–∞—Ç—É {report_date}): {report_file}")
        elif callback_data.startswith("report_user_date_") and 'selected_report_date' in context.user_data:
            # –û–±—ã—á–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            report_date = context.user_data['selected_report_date']
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
            query.edit_message_text(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è {user_name} –∑–∞ {report_date}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º CSV-—Ñ–æ—Ä–º–∞—Ç)
            report_file = generate_csv_report(user_id, date=report_date)
        else:
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            report_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é: {report_date}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
            query.edit_message_text(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è {user_name} –∑–∞ {report_date}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º CSV-—Ñ–æ—Ä–º–∞—Ç)
            report_file = generate_csv_report(user_id, date=report_date)
        
        is_html = False
        
        if os.path.exists(report_file):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ MIME-—Ç–∏–ø
            file_ext = "html" if is_html else "csv"
            mime_type = "text/html" if is_html else "text/csv"
            
            # Send report
            with open(report_file, 'rb') as f:
                context.bot.send_document(
                    chat_id=query.from_user.id,
                    document=f,
                    filename=f"report_{user_name}_{report_date}.{file_ext}",
                    caption=f"üìä –û—Ç—á–µ—Ç –¥–ª—è {user_name} ({report_date})"
                )
            
            
            # –ö–∞—Ä—Ç–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–∏–∂–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–æ—á–µ–∫

# Clean up
            os.remove(report_file)
            
            # Also generate map if locations available
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try:
                from database import get_active_location_sessions, mark_session_ended
                active_sessions = get_active_location_sessions(user_id)
                if active_sessions:
                    for session_id in active_sessions:
                        mark_session_ended(session_id, user_id)
                        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è {session_id} –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å —Å–µ—Å—Å–∏—è–º–∏
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            from database import get_today_locations_for_user
            locations = get_today_locations_for_user(user_id, date=report_date)
            
            if locations:
                # Format locations for map
                map_locations = []
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(locations)} —Ç–æ—á–µ–∫ –¥–ª—è –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –∑–∞ {report_date}")
                
                for loc in locations:
                    try:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ get_user_locations
                        if len(loc) >= 5:  # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å 5 –ø–æ–ª—è–º–∏ (id, lat, lon, timestamp, loc_type)
                            loc_id, lat, lon, timestamp, loc_type = loc
                        elif len(loc) >= 4:  # –§–æ—Ä–º–∞—Ç —Å 4 –ø–æ–ª—è–º–∏
                            loc_id, lat, lon, timestamp = loc
                            loc_type = 'intermediate'
                        elif len(loc) >= 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                            lat, lon, timestamp = loc[:3]
                            loc_type = 'intermediate'
                        else:
                            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞—Ü–∏–∏: {loc}")
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                        if not (isinstance(lat, (int, float)) or (isinstance(lat, str) and lat.replace('.', '', 1).isdigit())):
                            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —à–∏—Ä–æ—Ç—ã: {lat}, —Ç–∏–ø: {type(lat)}")
                            continue
                            
                        if not (isinstance(lon, (int, float)) or (isinstance(lon, str) and lon.replace('.', '', 1).isdigit())):
                            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–≥–æ—Ç—ã: {lon}, —Ç–∏–ø: {type(lon)}")
                            continue
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
                        if isinstance(lat, str):
                            lat = float(lat)
                        if isinstance(lon, str):
                            lon = float(lon)
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º timestamp, –µ—Å–ª–∏ –æ–Ω —Å—Ç—Ä–æ–∫–∞
                        if isinstance(timestamp, str):
                            try:
                                timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                            except ValueError:
                                try:
                                    timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S.%f')
                                except Exception as e:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å timestamp –ª–æ–∫–∞—Ü–∏–∏: {e}")
                                    timestamp = datetime.now(MOSCOW_TZ)
                        
                        map_locations.append((lat, lon, timestamp, loc_type))
                        logger.debug(f"–¢–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {lat}, {lon}, {timestamp}, {loc_type}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–∞—Ä—Ç—ã: {e}, –¥–∞–Ω–Ω—ã–µ: {loc}")
                        continue
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ create_direct_map, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ—á–µ–∫
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ create_direct_map –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ {report_date}")
                map_file = create_direct_map(user_id, report_date)
                
                if map_file and os.path.exists(map_file):
                    with open(map_file, 'rb') as f:
                        context.bot.send_document(
                            chat_id=query.from_user.id,
                            document=f,
                            filename=os.path.basename(map_file),
                            caption=f"üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π {user_name} ({report_date})"
                        )
                    logger.info(f"–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {user_name}: {map_file}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è {user_name}")
                    context.bot.send_message(
                        chat_id=query.from_user.id,
                        text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –¥–ª—è {user_name}"
                    )
            
            query.edit_message_text(f"–û—Ç—á–µ—Ç –¥–ª—è {user_name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            query.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è {user_name}. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        try:
            query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e2}")

def setup_bot():
    """Set up and configure the bot"""
    # Initialize the database
    init_db()
    
    # Load user mappings from file, but don't update the database
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    load_user_mappings_from_file(update_db=False)
    
    # Create the Updater
    updater = Updater(TOKEN)
    
    # Get the dispatcher
    dispatcher = updater.dispatcher
    
    # Add handlers
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("status", status_command))
    dispatcher.add_handler(CommandHandler("timeoff_stats", timeoff_stats_command))
    
    # Command to manually generate and send reports
    def generate_reports_command(update: Update, context: CallbackContext):
        """Handle the /generate_reports command - manually generate and send reports"""
        user_id = update.effective_user.id
        
        # Check if user is admin
        if not is_admin(user_id):
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return
        
        update.message.reply_text("–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")
        
        try:
            from scheduled_tasks import daily_report_task
            daily_report_task(context, force=True)
            update.message.reply_text("‚úÖ –û—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")
    
    dispatcher.add_handler(CommandHandler("generate_reports", generate_reports_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report —Å –¥–∞—Ç–æ–π
    def report_command(update: Update, context: CallbackContext):
        """Handle the /report YYYY-MM-DD command - generate report for a specific date"""
        user_id = update.effective_user.id
        
        # Check if user is admin
        if not is_admin(user_id):
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–¥–∞—Ç–∞)
        if not context.args or len(context.args) < 1:
            update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "/report –ì–ì–ì–ì-–ú–ú-–î–î\n\n"
                "–ü—Ä–∏–º–µ—Ä: /report 2025-05-01"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        report_date = context.args[0]
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /report —Å –¥–∞—Ç–æ–π: {report_date}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        try:
            datetime.strptime(report_date, '%Y-%m-%d')
        except ValueError:
            update.message.reply_text(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î.\n"
                "–ü—Ä–∏–º–µ—Ä: /report 2025-05-01"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['selected_report_date'] = report_date
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        try:
            from user_management import get_admin_user_selector
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_selector = get_admin_user_selector("report_user_date")
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ {report_date}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ {report_date}:",
                reply_markup=user_selector
            )
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /report: {e}")
            update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    dispatcher.add_handler(CommandHandler("report", report_command))
    
    # Admin commands from user_management
    from user_management import register_admin_handlers
    register_admin_handlers(dispatcher)
    
    # Time-off request handlers
    register_timeoff_handlers(dispatcher)
    
    # Handle locations
    dispatcher.add_handler(MessageHandler(Filters.location, handle_location))
    
    # Handle status messages from keyboard
    dispatcher.add_handler(MessageHandler(
        Filters.text & ~Filters.command & Filters.regex(f"^({'|'.join(STATUS_OPTIONS.values())})$"), 
        handle_status_message
    ))
    
    # Handle admin panel button
    dispatcher.add_handler(MessageHandler(
        Filters.text & Filters.regex("^üë§ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞$"),
        handle_admin_panel
    ))
    
    # Callback handlers
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ callback –∑–∞–ø—Ä–æ—Å—ã, –≤—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    def debug_callback_handler(update: Update, context: CallbackContext):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ callback –¥–∞–Ω–Ω—ã—Ö"""
        query = update.callback_query
        callback_data = query.data if query else "No callback data"
        logger.info(f"DEBUG - –ü–æ–ª—É—á–µ–Ω callback: {callback_data}")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–ª—å—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        if callback_data.startswith("admin_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            handle_admin_callback(update, context)
        elif callback_data.startswith("report_date_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤: {callback_data}")
            handle_admin_callback(update, context)
        elif callback_data.startswith("timeoff_stats_period_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—É–ª–æ–≤
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—É–ª–æ–≤: {callback_data}")
            handle_admin_callback(update, context)
        elif callback_data.startswith("report_user_") or callback_data.startswith("daily_report_user_") or callback_data.startswith("report_user_date_") or callback_data.startswith("report_user_week_"):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            parts = callback_data.split("_")
            logger.info(f"DEBUG - –ß–∞—Å—Ç–∏ callback: {parts}")
            
            if len(parts) >= 3 and parts[-1].isdigit():
                logger.info(f"–ü–µ—Ä–µ–¥–∞—é callback {callback_data} –≤ handle_report_callback")
                handle_report_callback(update, context)
            else:
                query.answer()
                query.edit_message_text(f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ callback: {callback_data}")
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö: {callback_data}")
        elif callback_data.startswith("locate_user_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            handle_locate_user_callback(update, context)
        elif callback_data.startswith("delete_user_") or callback_data.startswith("confirm_delete_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from user_management import handle_delete_user_callback, handle_confirm_delete_user
            if callback_data.startswith("delete_user_"):
                handle_delete_user_callback(update, context)
            else:
                handle_confirm_delete_user(update, context)
        elif callback_data.startswith("grant_admin_") or callback_data.startswith("revoke_admin_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            from user_management import handle_admin_rights_change
            handle_admin_rights_change(update, context)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    dispatcher.add_handler(CallbackQueryHandler(debug_callback_handler))
    
    # Set up scheduled tasks
    job_queue = updater.job_queue
    
    # Morning check job (runs every 10 minutes)
    job_queue.run_repeating(morning_check_task, interval=600, first=0)
    
    # Reset morning checks job (runs daily at 00:01)
    from datetime import time as dt_time
    job_queue.run_daily(reset_morning_checks_task, time=dt_time(0, 1))
    
    # Daily report job (runs daily at 17:30)
    from config import DAILY_REPORT_TIME
    report_time = dt_time(DAILY_REPORT_TIME[0], DAILY_REPORT_TIME[1])
    job_queue.run_daily(daily_report_task, time=report_time)
    logger.info(f"Scheduled daily report task at {report_time}")
    
    # Interval location tracking job (runs every 5 minutes)
    from scheduled_tasks import location_interval_task, check_user_activity
    job_queue.run_repeating(location_interval_task, interval=300, first=60)
    logger.info("Scheduled location interval task every 5 minutes")
    
    # User activity monitoring job (runs every 5 minutes, with a delay to not overlap with location task)
    job_queue.run_repeating(check_user_activity, interval=300, first=120)
    logger.info("Scheduled user activity monitoring task every 5 minutes")
    
    return updater

def run_polling():
    """Run the bot in polling mode"""
    updater = setup_bot()
    
    # Start the Bot in polling mode
    updater.start_polling()
    
    # Run the bot until you press Ctrl-C
    updater.idle()

def run_webhook():
    """Run the bot in webhook mode"""
    updater = setup_bot()
    
    # Set the webhook
    updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=f"{WEBHOOK_URL}/webhook" if WEBHOOK_URL else None
    )
    
    # Run the bot until you press Ctrl-C
    updater.idle()

def main():
    """Main function to run the bot"""
    logger.info(f"Starting WorkerTracker bot in {BOT_MODE} mode")
    
    if BOT_MODE.lower() == "webhook":
        run_webhook()
    else:
        run_polling()

if __name__ == "__main__":
    main()
