#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import logging
import sqlite3
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def add_location_points(user_id, session_id, segment_num, recreate=True):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—á–Ω—ã–µ 5 —Ç–æ—á–µ–∫ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞, —Å –Ω—É–∂–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ—Ç–º–µ—Ç–∫–∞–º–∏
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_id (str): ID —Å–µ—Å—Å–∏–∏
        segment_num (int): –ù–æ–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ (1 –∏–ª–∏ 2)
        recreate (bool): –ï—Å–ª–∏ True, —É–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—á–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('tracker.db')
        cursor = conn.cursor()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
        if segment_num == 1:
            # –ü–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç (–í –æ—Ñ–∏—Å–µ)
            start_time_str = "2025-05-08 08:00:00"
            end_time_str = "2025-05-08 08:20:00"
            start_coords = (55.758, 37.617)  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
            end_coords = (55.751, 37.618)    # –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
            status = "–í –æ—Ñ–∏—Å–µ üè¢"            # –°—Ç–∞—Ç—É—Å –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        else:
            # –í—Ç–æ—Ä–æ–π —Å–µ–≥–º–µ–Ω—Ç (–í –¥–≤–∏–∂–µ–Ω–∏–∏)
            start_time_str = "2025-05-08 08:30:00"
            end_time_str = "2025-05-08 08:50:00"
            start_coords = (55.747, 37.621)   # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
            end_coords = (55.745, 37.625)     # –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
            status = "–ü–µ—Ä–µ—Ä—ã–≤ ‚òï"             # –°—Ç–∞—Ç—É—Å –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ—á–∫–∏
        if recreate:
            if segment_num == 1:
                cursor.execute(
                    "DELETE FROM location_history WHERE user_id = ? AND timestamp BETWEEN ? AND ?",
                    (user_id, start_time_str, end_time_str)
                )
            else:
                cursor.execute(
                    "DELETE FROM location_history WHERE user_id = ? AND timestamp BETWEEN ? AND ?",
                    (user_id, start_time_str, end_time_str)
                )
            
            # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            cursor.execute(
                "DELETE FROM status_history WHERE user_id = ? AND timestamp BETWEEN ? AND ?",
                (user_id, start_time_str, end_time_str)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
            cursor.execute(
                "INSERT INTO status_history (user_id, status, timestamp) VALUES (?, ?, ?)",
                (user_id, status, start_time_str)
            )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        start_time = datetime.strptime(start_time_str, "%Y-%m-%d %H:%M:%S")
        end_time = datetime.strptime(end_time_str, "%Y-%m-%d %H:%M:%S")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —à–∞–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–≤–Ω–æ 5 —Ç–æ—á–µ–∫ (–≤–∫–ª—é—á–∞—è –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é)
        time_step = (end_time - start_time) / 4  # 4 –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è 5 —Ç–æ—á–µ–∫
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ - —Å–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–Ω—É—é –ª–∏–Ω–∏—é
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
        location_type = "start" if segment_num == 1 else "intermediate"
        cursor.execute(
            "INSERT INTO location_history (user_id, latitude, longitude, timestamp, session_id, location_type) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, start_coords[0], start_coords[1], start_time_str, session_id, location_type)
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ (3 —à—Ç—É–∫–∏)
        points = []
        for i in range(1, 4):
            # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            progress = i / 4.0  # –æ—Ç 0.25 –¥–æ 0.75
            lat = start_coords[0] + (end_coords[0] - start_coords[0]) * progress
            lon = start_coords[1] + (end_coords[1] - start_coords[1]) * progress
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            import random
            lat_jitter = random.uniform(-0.0003, 0.0003)
            lon_jitter = random.uniform(-0.0003, 0.0003)
            lat += lat_jitter
            lon += lon_jitter
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–π —Ç–æ—á–∫–∏
            point_time = start_time + time_step * i
            point_time_str = point_time.strftime("%Y-%m-%d %H:%M:%S")
            
            points.append((
                user_id, 
                lat, 
                lon, 
                point_time_str, 
                session_id, 
                "intermediate"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
        cursor.executemany(
            "INSERT INTO location_history (user_id, latitude, longitude, timestamp, session_id, location_type) VALUES (?, ?, ?, ?, ?, ?)",
            points
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
        location_type = "end" if segment_num == 2 else "intermediate"
        cursor.execute(
            "INSERT INTO location_history (user_id, latitude, longitude, timestamp, session_id, location_type) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, end_coords[0], end_coords[1], end_time_str, session_id, location_type)
        )
        
        conn.commit()
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ 5 —Ç–æ—á–µ–∫ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ {segment_num} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫: {e}")
        return False
    finally:
        if 'conn' in locals() and conn:
            conn.close()

def update_tooltips_for_markers():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ –≤–∏–¥–Ω—ã –≤ —Ç—É–ª—Ç–∏–ø–∞—Ö
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ fixed_map_generator.py, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏
        import fixed_map_generator
        file_path = 'fixed_map_generator.py'
        with open(file_path, 'r') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª –º–∞—Ä–∫–µ—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ—á–µ–∫
        if "tooltip=f\"" in content:
            logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç—É–ª—Ç–∏–ø–∞—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–æ—á–µ–∫")
            updated_content = content
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ—á–µ–∫
            if "tooltip=f\"{time_str}\"," in content:
                updated_content = updated_content.replace(
                    "tooltip=f\"{time_str}\",", 
                    "tooltip=f\"‚è±Ô∏è {time_str} | üìç[{lat:.6f}, {lon:.6f}] | üìã {current_status}\","
                )
            elif "tooltip=f\"–í—Ä–µ–º—è: {time_str}" in content:
                updated_content = updated_content.replace(
                    "tooltip=f\"–í—Ä–µ–º—è: {time_str} | –°—Ç–∞—Ç—É—Å: {current_status}\",", 
                    "tooltip=f\"‚è±Ô∏è {time_str} | üìç[{lat:.6f}, {lon:.6f}] | üìã {current_status}\","
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
            if "tooltip=f\"–ù–ê–ß–ê–õ–û —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}\"" in content:
                updated_content = updated_content.replace(
                    "tooltip=f\"–ù–ê–ß–ê–õ–û —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}\"", 
                    "tooltip=f\"üü¢ –ù–ê–ß–ê–õ–û —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1} | ‚è±Ô∏è {time_str} | üìç[{lat:.6f}, {lon:.6f}] | üìã {current_status}\""
                )
            elif "tooltip=f\"–ù–ê–ß–ê–õ–û —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1} | –°—Ç–∞—Ç—É—Å:" in content:
                updated_content = updated_content.replace(
                    "tooltip=f\"–ù–ê–ß–ê–õ–û —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1} | –°—Ç–∞—Ç—É—Å: {current_status}\"", 
                    "tooltip=f\"üü¢ –ù–ê–ß–ê–õ–û —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1} | ‚è±Ô∏è {time_str} | üìç[{lat:.6f}, {lon:.6f}] | üìã {current_status}\""
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
            if "tooltip=f\"–ö–û–ù–ï–¶ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}\"" in content:
                updated_content = updated_content.replace(
                    "tooltip=f\"–ö–û–ù–ï–¶ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}\"", 
                    "tooltip=f\"üî¥ –ö–û–ù–ï–¶ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1} | ‚è±Ô∏è {time_str} | üìç[{lat:.6f}, {lon:.6f}] | üìã {current_status}\""
                )
            elif "tooltip=f\"–ö–û–ù–ï–¶ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1} | –°—Ç–∞—Ç—É—Å:" in content:
                updated_content = updated_content.replace(
                    "tooltip=f\"–ö–û–ù–ï–¶ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1} | –°—Ç–∞—Ç—É—Å: {current_status}\"", 
                    "tooltip=f\"üî¥ –ö–û–ù–ï–¶ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1} | ‚è±Ô∏è {time_str} | üìç[{lat:.6f}, {lon:.6f}] | üìã {current_status}\""
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –≤—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
            if "tooltip=\"–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞\"," in content:
                updated_content = updated_content.replace(
                    "tooltip=\"–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞\",", 
                    "tooltip=f\"üü¢ –ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞ | ‚è±Ô∏è {first_event[3]} | üìç[{lat:.6f}, {lon:.6f}]\","
                )
            if "tooltip=\"–ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞\"," in content:
                updated_content = updated_content.replace(
                    "tooltip=\"–ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞\",", 
                    "tooltip=f\"üî¥ –ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞ | ‚è±Ô∏è {last_event[3]} | üìç[{lat:.6f}, {lon:.6f}]\","
                )
                
            with open(file_path, 'w') as f:
                f.write(updated_content)
            
            logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ç—É–ª—Ç–∏–ø–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        else:
            logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É–ª—Ç–∏–ø–æ–≤ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É–ª—Ç–∏–ø–æ–≤: {e}")
        return False

def main():
    # ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 999999
    session_id = "test_session_1"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–æ—á–µ–∫
    update_result = update_tooltips_for_markers()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –æ–±–æ–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    seg1_result = add_location_points(user_id, session_id, 1)
    seg2_result = add_location_points(user_id, session_id, 2)
    
    if seg1_result and seg2_result:
        logger.info("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –æ–±–æ–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        from fixed_map_generator import create_direct_map
        map_file = create_direct_map(user_id, "2025-05-08")
        logger.info(f"–ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {map_file}")
        print(f"‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {map_file}")
    else:
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—á–µ–∫")
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫")

if __name__ == "__main__":
    main()